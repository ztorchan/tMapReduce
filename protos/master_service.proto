syntax = "proto3";

import "state.proto";

package tmapreduce;

option cc_generic_services = true;

message MasterReplyMsg {
  bool ok = 1;
  string msg = 2;
  string redirect = 3;
}

/* Register */
message RegisterMsg {
  string name = 1;
  string address = 2;
  uint32 port = 3;
  repeated string acceptable_job_type = 4;
}
message RegisterReplyMsg {
  MasterReplyMsg reply = 1;
  uint32 worker_id = 2;
  uint32 master_id = 3;
}

/* Launch */
message LaunchMsg {
  message KV {
    string key = 1;
    string value = 2;
  }
  string name = 1;
  string type = 2;
  uint32 mapper_num = 3;
  uint32 reducer_num = 4;
  repeated KV kvs = 5;
}
message LaunchReplyMsg {
  MasterReplyMsg reply = 1;
  uint32 job_id = 2;
  string job_token = 3;
}

/* MapResult */
message CompleteMapMsg {
  message KV {
    string key = 1;
    string value = 2;
  }
  uint32 job_id = 1;
  uint32 subjob_id = 2;
  uint32 worker_id = 3;
  WorkerState state = 4;
  repeated KV map_result = 5;
}

/* ReduceResult */
message CompleteReduceMsg {
  uint32 job_id = 1;
  uint32 subjob_id = 2;
  uint32 worker_id = 3;
  WorkerState state = 4;
  repeated string reduce_result = 5;
}

/* GetResult */
message GetResultMsg {
  uint32 job_id = 1;
  uint64 job_secret = 2;
}
message GetResultReplyMsg {
  MasterReplyMsg reply = 1;
  repeated string results = 2;
}

service MasterService {
  rpc Register(RegisterMsg) returns (RegisterReplyMsg) {}
  rpc Launch(LaunchMsg) returns (LaunchReplyMsg) {}
  rpc CompleteMap(CompleteMapMsg) returns (MasterReplyMsg) {}
  rpc CompleteReduce(CompleteReduceMsg) returns (MasterReplyMsg) {}
  rpc GetResult(GetResultMsg) returns (GetResultReplyMsg) {}
  // TODO: check job stage and deny subjob
}