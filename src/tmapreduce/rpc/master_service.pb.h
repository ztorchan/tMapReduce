// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: master_service.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_master_5fservice_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_master_5fservice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
#include "state.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_master_5fservice_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_master_5fservice_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[11]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_master_5fservice_2eproto;
namespace tmapreduce {
class CompleteMapMsg;
class CompleteMapMsgDefaultTypeInternal;
extern CompleteMapMsgDefaultTypeInternal _CompleteMapMsg_default_instance_;
class CompleteMapMsg_KV;
class CompleteMapMsg_KVDefaultTypeInternal;
extern CompleteMapMsg_KVDefaultTypeInternal _CompleteMapMsg_KV_default_instance_;
class CompleteReduceMsg;
class CompleteReduceMsgDefaultTypeInternal;
extern CompleteReduceMsgDefaultTypeInternal _CompleteReduceMsg_default_instance_;
class GetResultMsg;
class GetResultMsgDefaultTypeInternal;
extern GetResultMsgDefaultTypeInternal _GetResultMsg_default_instance_;
class GetResultReplyMsg;
class GetResultReplyMsgDefaultTypeInternal;
extern GetResultReplyMsgDefaultTypeInternal _GetResultReplyMsg_default_instance_;
class LaunchMsg;
class LaunchMsgDefaultTypeInternal;
extern LaunchMsgDefaultTypeInternal _LaunchMsg_default_instance_;
class LaunchMsg_KV;
class LaunchMsg_KVDefaultTypeInternal;
extern LaunchMsg_KVDefaultTypeInternal _LaunchMsg_KV_default_instance_;
class LaunchReplyMsg;
class LaunchReplyMsgDefaultTypeInternal;
extern LaunchReplyMsgDefaultTypeInternal _LaunchReplyMsg_default_instance_;
class MasterReplyMsg;
class MasterReplyMsgDefaultTypeInternal;
extern MasterReplyMsgDefaultTypeInternal _MasterReplyMsg_default_instance_;
class RegisterMsg;
class RegisterMsgDefaultTypeInternal;
extern RegisterMsgDefaultTypeInternal _RegisterMsg_default_instance_;
class RegisterReplyMsg;
class RegisterReplyMsgDefaultTypeInternal;
extern RegisterReplyMsgDefaultTypeInternal _RegisterReplyMsg_default_instance_;
}  // namespace tmapreduce
PROTOBUF_NAMESPACE_OPEN
template<> ::tmapreduce::CompleteMapMsg* Arena::CreateMaybeMessage<::tmapreduce::CompleteMapMsg>(Arena*);
template<> ::tmapreduce::CompleteMapMsg_KV* Arena::CreateMaybeMessage<::tmapreduce::CompleteMapMsg_KV>(Arena*);
template<> ::tmapreduce::CompleteReduceMsg* Arena::CreateMaybeMessage<::tmapreduce::CompleteReduceMsg>(Arena*);
template<> ::tmapreduce::GetResultMsg* Arena::CreateMaybeMessage<::tmapreduce::GetResultMsg>(Arena*);
template<> ::tmapreduce::GetResultReplyMsg* Arena::CreateMaybeMessage<::tmapreduce::GetResultReplyMsg>(Arena*);
template<> ::tmapreduce::LaunchMsg* Arena::CreateMaybeMessage<::tmapreduce::LaunchMsg>(Arena*);
template<> ::tmapreduce::LaunchMsg_KV* Arena::CreateMaybeMessage<::tmapreduce::LaunchMsg_KV>(Arena*);
template<> ::tmapreduce::LaunchReplyMsg* Arena::CreateMaybeMessage<::tmapreduce::LaunchReplyMsg>(Arena*);
template<> ::tmapreduce::MasterReplyMsg* Arena::CreateMaybeMessage<::tmapreduce::MasterReplyMsg>(Arena*);
template<> ::tmapreduce::RegisterMsg* Arena::CreateMaybeMessage<::tmapreduce::RegisterMsg>(Arena*);
template<> ::tmapreduce::RegisterReplyMsg* Arena::CreateMaybeMessage<::tmapreduce::RegisterReplyMsg>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace tmapreduce {

// ===================================================================

class MasterReplyMsg PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tmapreduce.MasterReplyMsg) */ {
 public:
  inline MasterReplyMsg() : MasterReplyMsg(nullptr) {};
  virtual ~MasterReplyMsg();

  MasterReplyMsg(const MasterReplyMsg& from);
  MasterReplyMsg(MasterReplyMsg&& from) noexcept
    : MasterReplyMsg() {
    *this = ::std::move(from);
  }

  inline MasterReplyMsg& operator=(const MasterReplyMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline MasterReplyMsg& operator=(MasterReplyMsg&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MasterReplyMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MasterReplyMsg* internal_default_instance() {
    return reinterpret_cast<const MasterReplyMsg*>(
               &_MasterReplyMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MasterReplyMsg& a, MasterReplyMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(MasterReplyMsg* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MasterReplyMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MasterReplyMsg* New() const final {
    return CreateMaybeMessage<MasterReplyMsg>(nullptr);
  }

  MasterReplyMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MasterReplyMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MasterReplyMsg& from);
  void MergeFrom(const MasterReplyMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MasterReplyMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tmapreduce.MasterReplyMsg";
  }
  protected:
  explicit MasterReplyMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_master_5fservice_2eproto);
    return ::descriptor_table_master_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 2,
    kRedirectFieldNumber = 3,
    kOkFieldNumber = 1,
  };
  // string msg = 2;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_msg();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_msg(
      std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // string redirect = 3;
  void clear_redirect();
  const std::string& redirect() const;
  void set_redirect(const std::string& value);
  void set_redirect(std::string&& value);
  void set_redirect(const char* value);
  void set_redirect(const char* value, size_t size);
  std::string* mutable_redirect();
  std::string* release_redirect();
  void set_allocated_redirect(std::string* redirect);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_redirect();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_redirect(
      std::string* redirect);
  private:
  const std::string& _internal_redirect() const;
  void _internal_set_redirect(const std::string& value);
  std::string* _internal_mutable_redirect();
  public:

  // bool ok = 1;
  void clear_ok();
  bool ok() const;
  void set_ok(bool value);
  private:
  bool _internal_ok() const;
  void _internal_set_ok(bool value);
  public:

  // @@protoc_insertion_point(class_scope:tmapreduce.MasterReplyMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr redirect_;
  bool ok_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_master_5fservice_2eproto;
};
// -------------------------------------------------------------------

class RegisterMsg PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tmapreduce.RegisterMsg) */ {
 public:
  inline RegisterMsg() : RegisterMsg(nullptr) {};
  virtual ~RegisterMsg();

  RegisterMsg(const RegisterMsg& from);
  RegisterMsg(RegisterMsg&& from) noexcept
    : RegisterMsg() {
    *this = ::std::move(from);
  }

  inline RegisterMsg& operator=(const RegisterMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterMsg& operator=(RegisterMsg&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RegisterMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegisterMsg* internal_default_instance() {
    return reinterpret_cast<const RegisterMsg*>(
               &_RegisterMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RegisterMsg& a, RegisterMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisterMsg* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegisterMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegisterMsg* New() const final {
    return CreateMaybeMessage<RegisterMsg>(nullptr);
  }

  RegisterMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegisterMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RegisterMsg& from);
  void MergeFrom(const RegisterMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tmapreduce.RegisterMsg";
  }
  protected:
  explicit RegisterMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_master_5fservice_2eproto);
    return ::descriptor_table_master_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAcceptableJobTypeFieldNumber = 4,
    kNameFieldNumber = 1,
    kEpFieldNumber = 2,
  };
  // repeated string acceptable_job_type = 4;
  int acceptable_job_type_size() const;
  private:
  int _internal_acceptable_job_type_size() const;
  public:
  void clear_acceptable_job_type();
  const std::string& acceptable_job_type(int index) const;
  std::string* mutable_acceptable_job_type(int index);
  void set_acceptable_job_type(int index, const std::string& value);
  void set_acceptable_job_type(int index, std::string&& value);
  void set_acceptable_job_type(int index, const char* value);
  void set_acceptable_job_type(int index, const char* value, size_t size);
  std::string* add_acceptable_job_type();
  void add_acceptable_job_type(const std::string& value);
  void add_acceptable_job_type(std::string&& value);
  void add_acceptable_job_type(const char* value);
  void add_acceptable_job_type(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& acceptable_job_type() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_acceptable_job_type();
  private:
  const std::string& _internal_acceptable_job_type(int index) const;
  std::string* _internal_add_acceptable_job_type();
  public:

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string ep = 2;
  void clear_ep();
  const std::string& ep() const;
  void set_ep(const std::string& value);
  void set_ep(std::string&& value);
  void set_ep(const char* value);
  void set_ep(const char* value, size_t size);
  std::string* mutable_ep();
  std::string* release_ep();
  void set_allocated_ep(std::string* ep);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_ep();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_ep(
      std::string* ep);
  private:
  const std::string& _internal_ep() const;
  void _internal_set_ep(const std::string& value);
  std::string* _internal_mutable_ep();
  public:

  // @@protoc_insertion_point(class_scope:tmapreduce.RegisterMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> acceptable_job_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ep_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_master_5fservice_2eproto;
};
// -------------------------------------------------------------------

class RegisterReplyMsg PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tmapreduce.RegisterReplyMsg) */ {
 public:
  inline RegisterReplyMsg() : RegisterReplyMsg(nullptr) {};
  virtual ~RegisterReplyMsg();

  RegisterReplyMsg(const RegisterReplyMsg& from);
  RegisterReplyMsg(RegisterReplyMsg&& from) noexcept
    : RegisterReplyMsg() {
    *this = ::std::move(from);
  }

  inline RegisterReplyMsg& operator=(const RegisterReplyMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterReplyMsg& operator=(RegisterReplyMsg&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RegisterReplyMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegisterReplyMsg* internal_default_instance() {
    return reinterpret_cast<const RegisterReplyMsg*>(
               &_RegisterReplyMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RegisterReplyMsg& a, RegisterReplyMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisterReplyMsg* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegisterReplyMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegisterReplyMsg* New() const final {
    return CreateMaybeMessage<RegisterReplyMsg>(nullptr);
  }

  RegisterReplyMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegisterReplyMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RegisterReplyMsg& from);
  void MergeFrom(const RegisterReplyMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterReplyMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tmapreduce.RegisterReplyMsg";
  }
  protected:
  explicit RegisterReplyMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_master_5fservice_2eproto);
    return ::descriptor_table_master_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReplyFieldNumber = 1,
    kWorkerIdFieldNumber = 2,
    kMasterIdFieldNumber = 3,
  };
  // .tmapreduce.MasterReplyMsg reply = 1;
  bool has_reply() const;
  private:
  bool _internal_has_reply() const;
  public:
  void clear_reply();
  const ::tmapreduce::MasterReplyMsg& reply() const;
  ::tmapreduce::MasterReplyMsg* release_reply();
  ::tmapreduce::MasterReplyMsg* mutable_reply();
  void set_allocated_reply(::tmapreduce::MasterReplyMsg* reply);
  private:
  const ::tmapreduce::MasterReplyMsg& _internal_reply() const;
  ::tmapreduce::MasterReplyMsg* _internal_mutable_reply();
  public:
  void unsafe_arena_set_allocated_reply(
      ::tmapreduce::MasterReplyMsg* reply);
  ::tmapreduce::MasterReplyMsg* unsafe_arena_release_reply();

  // uint32 worker_id = 2;
  void clear_worker_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 worker_id() const;
  void set_worker_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_worker_id() const;
  void _internal_set_worker_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 master_id = 3;
  void clear_master_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 master_id() const;
  void set_master_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_master_id() const;
  void _internal_set_master_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:tmapreduce.RegisterReplyMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::tmapreduce::MasterReplyMsg* reply_;
  ::PROTOBUF_NAMESPACE_ID::uint32 worker_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 master_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_master_5fservice_2eproto;
};
// -------------------------------------------------------------------

class LaunchMsg_KV PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tmapreduce.LaunchMsg.KV) */ {
 public:
  inline LaunchMsg_KV() : LaunchMsg_KV(nullptr) {};
  virtual ~LaunchMsg_KV();

  LaunchMsg_KV(const LaunchMsg_KV& from);
  LaunchMsg_KV(LaunchMsg_KV&& from) noexcept
    : LaunchMsg_KV() {
    *this = ::std::move(from);
  }

  inline LaunchMsg_KV& operator=(const LaunchMsg_KV& from) {
    CopyFrom(from);
    return *this;
  }
  inline LaunchMsg_KV& operator=(LaunchMsg_KV&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LaunchMsg_KV& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LaunchMsg_KV* internal_default_instance() {
    return reinterpret_cast<const LaunchMsg_KV*>(
               &_LaunchMsg_KV_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(LaunchMsg_KV& a, LaunchMsg_KV& b) {
    a.Swap(&b);
  }
  inline void Swap(LaunchMsg_KV* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LaunchMsg_KV* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LaunchMsg_KV* New() const final {
    return CreateMaybeMessage<LaunchMsg_KV>(nullptr);
  }

  LaunchMsg_KV* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LaunchMsg_KV>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LaunchMsg_KV& from);
  void MergeFrom(const LaunchMsg_KV& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LaunchMsg_KV* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tmapreduce.LaunchMsg.KV";
  }
  protected:
  explicit LaunchMsg_KV(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_master_5fservice_2eproto);
    return ::descriptor_table_master_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string key = 1;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_key();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_key(
      std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // string value = 2;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_value();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_value(
      std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:tmapreduce.LaunchMsg.KV)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_master_5fservice_2eproto;
};
// -------------------------------------------------------------------

class LaunchMsg PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tmapreduce.LaunchMsg) */ {
 public:
  inline LaunchMsg() : LaunchMsg(nullptr) {};
  virtual ~LaunchMsg();

  LaunchMsg(const LaunchMsg& from);
  LaunchMsg(LaunchMsg&& from) noexcept
    : LaunchMsg() {
    *this = ::std::move(from);
  }

  inline LaunchMsg& operator=(const LaunchMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline LaunchMsg& operator=(LaunchMsg&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LaunchMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LaunchMsg* internal_default_instance() {
    return reinterpret_cast<const LaunchMsg*>(
               &_LaunchMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(LaunchMsg& a, LaunchMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(LaunchMsg* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LaunchMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LaunchMsg* New() const final {
    return CreateMaybeMessage<LaunchMsg>(nullptr);
  }

  LaunchMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LaunchMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LaunchMsg& from);
  void MergeFrom(const LaunchMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LaunchMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tmapreduce.LaunchMsg";
  }
  protected:
  explicit LaunchMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_master_5fservice_2eproto);
    return ::descriptor_table_master_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef LaunchMsg_KV KV;

  // accessors -------------------------------------------------------

  enum : int {
    kKvsFieldNumber = 6,
    kNameFieldNumber = 1,
    kTypeFieldNumber = 2,
    kTokenFieldNumber = 5,
    kMapperNumFieldNumber = 3,
    kReducerNumFieldNumber = 4,
  };
  // repeated .tmapreduce.LaunchMsg.KV kvs = 6;
  int kvs_size() const;
  private:
  int _internal_kvs_size() const;
  public:
  void clear_kvs();
  ::tmapreduce::LaunchMsg_KV* mutable_kvs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tmapreduce::LaunchMsg_KV >*
      mutable_kvs();
  private:
  const ::tmapreduce::LaunchMsg_KV& _internal_kvs(int index) const;
  ::tmapreduce::LaunchMsg_KV* _internal_add_kvs();
  public:
  const ::tmapreduce::LaunchMsg_KV& kvs(int index) const;
  ::tmapreduce::LaunchMsg_KV* add_kvs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tmapreduce::LaunchMsg_KV >&
      kvs() const;

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string type = 2;
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_type();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_type(
      std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // string token = 5;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_token();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_token(
      std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // uint32 mapper_num = 3;
  void clear_mapper_num();
  ::PROTOBUF_NAMESPACE_ID::uint32 mapper_num() const;
  void set_mapper_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_mapper_num() const;
  void _internal_set_mapper_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 reducer_num = 4;
  void clear_reducer_num();
  ::PROTOBUF_NAMESPACE_ID::uint32 reducer_num() const;
  void set_reducer_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_reducer_num() const;
  void _internal_set_reducer_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:tmapreduce.LaunchMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tmapreduce::LaunchMsg_KV > kvs_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  ::PROTOBUF_NAMESPACE_ID::uint32 mapper_num_;
  ::PROTOBUF_NAMESPACE_ID::uint32 reducer_num_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_master_5fservice_2eproto;
};
// -------------------------------------------------------------------

class LaunchReplyMsg PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tmapreduce.LaunchReplyMsg) */ {
 public:
  inline LaunchReplyMsg() : LaunchReplyMsg(nullptr) {};
  virtual ~LaunchReplyMsg();

  LaunchReplyMsg(const LaunchReplyMsg& from);
  LaunchReplyMsg(LaunchReplyMsg&& from) noexcept
    : LaunchReplyMsg() {
    *this = ::std::move(from);
  }

  inline LaunchReplyMsg& operator=(const LaunchReplyMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline LaunchReplyMsg& operator=(LaunchReplyMsg&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LaunchReplyMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LaunchReplyMsg* internal_default_instance() {
    return reinterpret_cast<const LaunchReplyMsg*>(
               &_LaunchReplyMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(LaunchReplyMsg& a, LaunchReplyMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(LaunchReplyMsg* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LaunchReplyMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LaunchReplyMsg* New() const final {
    return CreateMaybeMessage<LaunchReplyMsg>(nullptr);
  }

  LaunchReplyMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LaunchReplyMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LaunchReplyMsg& from);
  void MergeFrom(const LaunchReplyMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LaunchReplyMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tmapreduce.LaunchReplyMsg";
  }
  protected:
  explicit LaunchReplyMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_master_5fservice_2eproto);
    return ::descriptor_table_master_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReplyFieldNumber = 1,
    kJobIdFieldNumber = 2,
  };
  // .tmapreduce.MasterReplyMsg reply = 1;
  bool has_reply() const;
  private:
  bool _internal_has_reply() const;
  public:
  void clear_reply();
  const ::tmapreduce::MasterReplyMsg& reply() const;
  ::tmapreduce::MasterReplyMsg* release_reply();
  ::tmapreduce::MasterReplyMsg* mutable_reply();
  void set_allocated_reply(::tmapreduce::MasterReplyMsg* reply);
  private:
  const ::tmapreduce::MasterReplyMsg& _internal_reply() const;
  ::tmapreduce::MasterReplyMsg* _internal_mutable_reply();
  public:
  void unsafe_arena_set_allocated_reply(
      ::tmapreduce::MasterReplyMsg* reply);
  ::tmapreduce::MasterReplyMsg* unsafe_arena_release_reply();

  // uint32 job_id = 2;
  void clear_job_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 job_id() const;
  void set_job_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_job_id() const;
  void _internal_set_job_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:tmapreduce.LaunchReplyMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::tmapreduce::MasterReplyMsg* reply_;
  ::PROTOBUF_NAMESPACE_ID::uint32 job_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_master_5fservice_2eproto;
};
// -------------------------------------------------------------------

class CompleteMapMsg_KV PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tmapreduce.CompleteMapMsg.KV) */ {
 public:
  inline CompleteMapMsg_KV() : CompleteMapMsg_KV(nullptr) {};
  virtual ~CompleteMapMsg_KV();

  CompleteMapMsg_KV(const CompleteMapMsg_KV& from);
  CompleteMapMsg_KV(CompleteMapMsg_KV&& from) noexcept
    : CompleteMapMsg_KV() {
    *this = ::std::move(from);
  }

  inline CompleteMapMsg_KV& operator=(const CompleteMapMsg_KV& from) {
    CopyFrom(from);
    return *this;
  }
  inline CompleteMapMsg_KV& operator=(CompleteMapMsg_KV&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CompleteMapMsg_KV& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CompleteMapMsg_KV* internal_default_instance() {
    return reinterpret_cast<const CompleteMapMsg_KV*>(
               &_CompleteMapMsg_KV_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CompleteMapMsg_KV& a, CompleteMapMsg_KV& b) {
    a.Swap(&b);
  }
  inline void Swap(CompleteMapMsg_KV* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CompleteMapMsg_KV* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CompleteMapMsg_KV* New() const final {
    return CreateMaybeMessage<CompleteMapMsg_KV>(nullptr);
  }

  CompleteMapMsg_KV* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CompleteMapMsg_KV>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CompleteMapMsg_KV& from);
  void MergeFrom(const CompleteMapMsg_KV& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CompleteMapMsg_KV* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tmapreduce.CompleteMapMsg.KV";
  }
  protected:
  explicit CompleteMapMsg_KV(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_master_5fservice_2eproto);
    return ::descriptor_table_master_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string key = 1;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_key();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_key(
      std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // string value = 2;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_value();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_value(
      std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:tmapreduce.CompleteMapMsg.KV)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_master_5fservice_2eproto;
};
// -------------------------------------------------------------------

class CompleteMapMsg PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tmapreduce.CompleteMapMsg) */ {
 public:
  inline CompleteMapMsg() : CompleteMapMsg(nullptr) {};
  virtual ~CompleteMapMsg();

  CompleteMapMsg(const CompleteMapMsg& from);
  CompleteMapMsg(CompleteMapMsg&& from) noexcept
    : CompleteMapMsg() {
    *this = ::std::move(from);
  }

  inline CompleteMapMsg& operator=(const CompleteMapMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline CompleteMapMsg& operator=(CompleteMapMsg&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CompleteMapMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CompleteMapMsg* internal_default_instance() {
    return reinterpret_cast<const CompleteMapMsg*>(
               &_CompleteMapMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CompleteMapMsg& a, CompleteMapMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(CompleteMapMsg* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CompleteMapMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CompleteMapMsg* New() const final {
    return CreateMaybeMessage<CompleteMapMsg>(nullptr);
  }

  CompleteMapMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CompleteMapMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CompleteMapMsg& from);
  void MergeFrom(const CompleteMapMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CompleteMapMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tmapreduce.CompleteMapMsg";
  }
  protected:
  explicit CompleteMapMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_master_5fservice_2eproto);
    return ::descriptor_table_master_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef CompleteMapMsg_KV KV;

  // accessors -------------------------------------------------------

  enum : int {
    kMapResultFieldNumber = 5,
    kWorkerNameFieldNumber = 3,
    kJobIdFieldNumber = 1,
    kSubjobIdFieldNumber = 2,
    kStateFieldNumber = 4,
  };
  // repeated .tmapreduce.CompleteMapMsg.KV map_result = 5;
  int map_result_size() const;
  private:
  int _internal_map_result_size() const;
  public:
  void clear_map_result();
  ::tmapreduce::CompleteMapMsg_KV* mutable_map_result(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tmapreduce::CompleteMapMsg_KV >*
      mutable_map_result();
  private:
  const ::tmapreduce::CompleteMapMsg_KV& _internal_map_result(int index) const;
  ::tmapreduce::CompleteMapMsg_KV* _internal_add_map_result();
  public:
  const ::tmapreduce::CompleteMapMsg_KV& map_result(int index) const;
  ::tmapreduce::CompleteMapMsg_KV* add_map_result();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tmapreduce::CompleteMapMsg_KV >&
      map_result() const;

  // string worker_name = 3;
  void clear_worker_name();
  const std::string& worker_name() const;
  void set_worker_name(const std::string& value);
  void set_worker_name(std::string&& value);
  void set_worker_name(const char* value);
  void set_worker_name(const char* value, size_t size);
  std::string* mutable_worker_name();
  std::string* release_worker_name();
  void set_allocated_worker_name(std::string* worker_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_worker_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_worker_name(
      std::string* worker_name);
  private:
  const std::string& _internal_worker_name() const;
  void _internal_set_worker_name(const std::string& value);
  std::string* _internal_mutable_worker_name();
  public:

  // uint32 job_id = 1;
  void clear_job_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 job_id() const;
  void set_job_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_job_id() const;
  void _internal_set_job_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 subjob_id = 2;
  void clear_subjob_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 subjob_id() const;
  void set_subjob_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_subjob_id() const;
  void _internal_set_subjob_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .tmapreduce.WorkerState state = 4;
  void clear_state();
  ::tmapreduce::WorkerState state() const;
  void set_state(::tmapreduce::WorkerState value);
  private:
  ::tmapreduce::WorkerState _internal_state() const;
  void _internal_set_state(::tmapreduce::WorkerState value);
  public:

  // @@protoc_insertion_point(class_scope:tmapreduce.CompleteMapMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tmapreduce::CompleteMapMsg_KV > map_result_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr worker_name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 job_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 subjob_id_;
  int state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_master_5fservice_2eproto;
};
// -------------------------------------------------------------------

class CompleteReduceMsg PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tmapreduce.CompleteReduceMsg) */ {
 public:
  inline CompleteReduceMsg() : CompleteReduceMsg(nullptr) {};
  virtual ~CompleteReduceMsg();

  CompleteReduceMsg(const CompleteReduceMsg& from);
  CompleteReduceMsg(CompleteReduceMsg&& from) noexcept
    : CompleteReduceMsg() {
    *this = ::std::move(from);
  }

  inline CompleteReduceMsg& operator=(const CompleteReduceMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline CompleteReduceMsg& operator=(CompleteReduceMsg&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CompleteReduceMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CompleteReduceMsg* internal_default_instance() {
    return reinterpret_cast<const CompleteReduceMsg*>(
               &_CompleteReduceMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CompleteReduceMsg& a, CompleteReduceMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(CompleteReduceMsg* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CompleteReduceMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CompleteReduceMsg* New() const final {
    return CreateMaybeMessage<CompleteReduceMsg>(nullptr);
  }

  CompleteReduceMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CompleteReduceMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CompleteReduceMsg& from);
  void MergeFrom(const CompleteReduceMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CompleteReduceMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tmapreduce.CompleteReduceMsg";
  }
  protected:
  explicit CompleteReduceMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_master_5fservice_2eproto);
    return ::descriptor_table_master_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReduceResultFieldNumber = 5,
    kWorkerNameFieldNumber = 3,
    kJobIdFieldNumber = 1,
    kSubjobIdFieldNumber = 2,
    kStateFieldNumber = 4,
  };
  // repeated string reduce_result = 5;
  int reduce_result_size() const;
  private:
  int _internal_reduce_result_size() const;
  public:
  void clear_reduce_result();
  const std::string& reduce_result(int index) const;
  std::string* mutable_reduce_result(int index);
  void set_reduce_result(int index, const std::string& value);
  void set_reduce_result(int index, std::string&& value);
  void set_reduce_result(int index, const char* value);
  void set_reduce_result(int index, const char* value, size_t size);
  std::string* add_reduce_result();
  void add_reduce_result(const std::string& value);
  void add_reduce_result(std::string&& value);
  void add_reduce_result(const char* value);
  void add_reduce_result(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& reduce_result() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_reduce_result();
  private:
  const std::string& _internal_reduce_result(int index) const;
  std::string* _internal_add_reduce_result();
  public:

  // string worker_name = 3;
  void clear_worker_name();
  const std::string& worker_name() const;
  void set_worker_name(const std::string& value);
  void set_worker_name(std::string&& value);
  void set_worker_name(const char* value);
  void set_worker_name(const char* value, size_t size);
  std::string* mutable_worker_name();
  std::string* release_worker_name();
  void set_allocated_worker_name(std::string* worker_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_worker_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_worker_name(
      std::string* worker_name);
  private:
  const std::string& _internal_worker_name() const;
  void _internal_set_worker_name(const std::string& value);
  std::string* _internal_mutable_worker_name();
  public:

  // uint32 job_id = 1;
  void clear_job_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 job_id() const;
  void set_job_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_job_id() const;
  void _internal_set_job_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 subjob_id = 2;
  void clear_subjob_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 subjob_id() const;
  void set_subjob_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_subjob_id() const;
  void _internal_set_subjob_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .tmapreduce.WorkerState state = 4;
  void clear_state();
  ::tmapreduce::WorkerState state() const;
  void set_state(::tmapreduce::WorkerState value);
  private:
  ::tmapreduce::WorkerState _internal_state() const;
  void _internal_set_state(::tmapreduce::WorkerState value);
  public:

  // @@protoc_insertion_point(class_scope:tmapreduce.CompleteReduceMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> reduce_result_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr worker_name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 job_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 subjob_id_;
  int state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_master_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetResultMsg PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tmapreduce.GetResultMsg) */ {
 public:
  inline GetResultMsg() : GetResultMsg(nullptr) {};
  virtual ~GetResultMsg();

  GetResultMsg(const GetResultMsg& from);
  GetResultMsg(GetResultMsg&& from) noexcept
    : GetResultMsg() {
    *this = ::std::move(from);
  }

  inline GetResultMsg& operator=(const GetResultMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetResultMsg& operator=(GetResultMsg&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetResultMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetResultMsg* internal_default_instance() {
    return reinterpret_cast<const GetResultMsg*>(
               &_GetResultMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(GetResultMsg& a, GetResultMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(GetResultMsg* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetResultMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetResultMsg* New() const final {
    return CreateMaybeMessage<GetResultMsg>(nullptr);
  }

  GetResultMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetResultMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetResultMsg& from);
  void MergeFrom(const GetResultMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetResultMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tmapreduce.GetResultMsg";
  }
  protected:
  explicit GetResultMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_master_5fservice_2eproto);
    return ::descriptor_table_master_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 2,
    kJobIdFieldNumber = 1,
  };
  // string token = 2;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_token();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_token(
      std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // uint32 job_id = 1;
  void clear_job_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 job_id() const;
  void set_job_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_job_id() const;
  void _internal_set_job_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:tmapreduce.GetResultMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  ::PROTOBUF_NAMESPACE_ID::uint32 job_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_master_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetResultReplyMsg PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tmapreduce.GetResultReplyMsg) */ {
 public:
  inline GetResultReplyMsg() : GetResultReplyMsg(nullptr) {};
  virtual ~GetResultReplyMsg();

  GetResultReplyMsg(const GetResultReplyMsg& from);
  GetResultReplyMsg(GetResultReplyMsg&& from) noexcept
    : GetResultReplyMsg() {
    *this = ::std::move(from);
  }

  inline GetResultReplyMsg& operator=(const GetResultReplyMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetResultReplyMsg& operator=(GetResultReplyMsg&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetResultReplyMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetResultReplyMsg* internal_default_instance() {
    return reinterpret_cast<const GetResultReplyMsg*>(
               &_GetResultReplyMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(GetResultReplyMsg& a, GetResultReplyMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(GetResultReplyMsg* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetResultReplyMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetResultReplyMsg* New() const final {
    return CreateMaybeMessage<GetResultReplyMsg>(nullptr);
  }

  GetResultReplyMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetResultReplyMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetResultReplyMsg& from);
  void MergeFrom(const GetResultReplyMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetResultReplyMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tmapreduce.GetResultReplyMsg";
  }
  protected:
  explicit GetResultReplyMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_master_5fservice_2eproto);
    return ::descriptor_table_master_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultsFieldNumber = 2,
    kReplyFieldNumber = 1,
  };
  // repeated string results = 2;
  int results_size() const;
  private:
  int _internal_results_size() const;
  public:
  void clear_results();
  const std::string& results(int index) const;
  std::string* mutable_results(int index);
  void set_results(int index, const std::string& value);
  void set_results(int index, std::string&& value);
  void set_results(int index, const char* value);
  void set_results(int index, const char* value, size_t size);
  std::string* add_results();
  void add_results(const std::string& value);
  void add_results(std::string&& value);
  void add_results(const char* value);
  void add_results(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& results() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_results();
  private:
  const std::string& _internal_results(int index) const;
  std::string* _internal_add_results();
  public:

  // .tmapreduce.MasterReplyMsg reply = 1;
  bool has_reply() const;
  private:
  bool _internal_has_reply() const;
  public:
  void clear_reply();
  const ::tmapreduce::MasterReplyMsg& reply() const;
  ::tmapreduce::MasterReplyMsg* release_reply();
  ::tmapreduce::MasterReplyMsg* mutable_reply();
  void set_allocated_reply(::tmapreduce::MasterReplyMsg* reply);
  private:
  const ::tmapreduce::MasterReplyMsg& _internal_reply() const;
  ::tmapreduce::MasterReplyMsg* _internal_mutable_reply();
  public:
  void unsafe_arena_set_allocated_reply(
      ::tmapreduce::MasterReplyMsg* reply);
  ::tmapreduce::MasterReplyMsg* unsafe_arena_release_reply();

  // @@protoc_insertion_point(class_scope:tmapreduce.GetResultReplyMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> results_;
  ::tmapreduce::MasterReplyMsg* reply_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_master_5fservice_2eproto;
};
// ===================================================================

class MasterService_Stub;

class MasterService : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline MasterService() {};
 public:
  virtual ~MasterService();

  typedef MasterService_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void Register(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::tmapreduce::RegisterMsg* request,
                       ::tmapreduce::RegisterReplyMsg* response,
                       ::google::protobuf::Closure* done);
  virtual void Launch(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::tmapreduce::LaunchMsg* request,
                       ::tmapreduce::LaunchReplyMsg* response,
                       ::google::protobuf::Closure* done);
  virtual void CompleteMap(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::tmapreduce::CompleteMapMsg* request,
                       ::tmapreduce::MasterReplyMsg* response,
                       ::google::protobuf::Closure* done);
  virtual void CompleteReduce(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::tmapreduce::CompleteReduceMsg* request,
                       ::tmapreduce::MasterReplyMsg* response,
                       ::google::protobuf::Closure* done);
  virtual void GetResult(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::tmapreduce::GetResultMsg* request,
                       ::tmapreduce::GetResultReplyMsg* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(MasterService);
};

class MasterService_Stub : public MasterService {
 public:
  MasterService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  MasterService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~MasterService_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements MasterService ------------------------------------------

  void Register(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::tmapreduce::RegisterMsg* request,
                       ::tmapreduce::RegisterReplyMsg* response,
                       ::google::protobuf::Closure* done);
  void Launch(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::tmapreduce::LaunchMsg* request,
                       ::tmapreduce::LaunchReplyMsg* response,
                       ::google::protobuf::Closure* done);
  void CompleteMap(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::tmapreduce::CompleteMapMsg* request,
                       ::tmapreduce::MasterReplyMsg* response,
                       ::google::protobuf::Closure* done);
  void CompleteReduce(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::tmapreduce::CompleteReduceMsg* request,
                       ::tmapreduce::MasterReplyMsg* response,
                       ::google::protobuf::Closure* done);
  void GetResult(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::tmapreduce::GetResultMsg* request,
                       ::tmapreduce::GetResultReplyMsg* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(MasterService_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MasterReplyMsg

// bool ok = 1;
inline void MasterReplyMsg::clear_ok() {
  ok_ = false;
}
inline bool MasterReplyMsg::_internal_ok() const {
  return ok_;
}
inline bool MasterReplyMsg::ok() const {
  // @@protoc_insertion_point(field_get:tmapreduce.MasterReplyMsg.ok)
  return _internal_ok();
}
inline void MasterReplyMsg::_internal_set_ok(bool value) {
  
  ok_ = value;
}
inline void MasterReplyMsg::set_ok(bool value) {
  _internal_set_ok(value);
  // @@protoc_insertion_point(field_set:tmapreduce.MasterReplyMsg.ok)
}

// string msg = 2;
inline void MasterReplyMsg::clear_msg() {
  msg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& MasterReplyMsg::msg() const {
  // @@protoc_insertion_point(field_get:tmapreduce.MasterReplyMsg.msg)
  return _internal_msg();
}
inline void MasterReplyMsg::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:tmapreduce.MasterReplyMsg.msg)
}
inline std::string* MasterReplyMsg::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:tmapreduce.MasterReplyMsg.msg)
  return _internal_mutable_msg();
}
inline const std::string& MasterReplyMsg::_internal_msg() const {
  return msg_.Get();
}
inline void MasterReplyMsg::_internal_set_msg(const std::string& value) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MasterReplyMsg::set_msg(std::string&& value) {
  
  msg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tmapreduce.MasterReplyMsg.msg)
}
inline void MasterReplyMsg::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:tmapreduce.MasterReplyMsg.msg)
}
inline void MasterReplyMsg::set_msg(const char* value,
    size_t size) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tmapreduce.MasterReplyMsg.msg)
}
inline std::string* MasterReplyMsg::_internal_mutable_msg() {
  
  return msg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MasterReplyMsg::release_msg() {
  // @@protoc_insertion_point(field_release:tmapreduce.MasterReplyMsg.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MasterReplyMsg::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tmapreduce.MasterReplyMsg.msg)
}
inline std::string* MasterReplyMsg::unsafe_arena_release_msg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tmapreduce.MasterReplyMsg.msg)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return msg_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void MasterReplyMsg::unsafe_arena_set_allocated_msg(
    std::string* msg) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      msg, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tmapreduce.MasterReplyMsg.msg)
}

// string redirect = 3;
inline void MasterReplyMsg::clear_redirect() {
  redirect_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& MasterReplyMsg::redirect() const {
  // @@protoc_insertion_point(field_get:tmapreduce.MasterReplyMsg.redirect)
  return _internal_redirect();
}
inline void MasterReplyMsg::set_redirect(const std::string& value) {
  _internal_set_redirect(value);
  // @@protoc_insertion_point(field_set:tmapreduce.MasterReplyMsg.redirect)
}
inline std::string* MasterReplyMsg::mutable_redirect() {
  // @@protoc_insertion_point(field_mutable:tmapreduce.MasterReplyMsg.redirect)
  return _internal_mutable_redirect();
}
inline const std::string& MasterReplyMsg::_internal_redirect() const {
  return redirect_.Get();
}
inline void MasterReplyMsg::_internal_set_redirect(const std::string& value) {
  
  redirect_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MasterReplyMsg::set_redirect(std::string&& value) {
  
  redirect_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tmapreduce.MasterReplyMsg.redirect)
}
inline void MasterReplyMsg::set_redirect(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  redirect_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:tmapreduce.MasterReplyMsg.redirect)
}
inline void MasterReplyMsg::set_redirect(const char* value,
    size_t size) {
  
  redirect_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tmapreduce.MasterReplyMsg.redirect)
}
inline std::string* MasterReplyMsg::_internal_mutable_redirect() {
  
  return redirect_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MasterReplyMsg::release_redirect() {
  // @@protoc_insertion_point(field_release:tmapreduce.MasterReplyMsg.redirect)
  return redirect_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MasterReplyMsg::set_allocated_redirect(std::string* redirect) {
  if (redirect != nullptr) {
    
  } else {
    
  }
  redirect_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), redirect,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tmapreduce.MasterReplyMsg.redirect)
}
inline std::string* MasterReplyMsg::unsafe_arena_release_redirect() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tmapreduce.MasterReplyMsg.redirect)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return redirect_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void MasterReplyMsg::unsafe_arena_set_allocated_redirect(
    std::string* redirect) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (redirect != nullptr) {
    
  } else {
    
  }
  redirect_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      redirect, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tmapreduce.MasterReplyMsg.redirect)
}

// -------------------------------------------------------------------

// RegisterMsg

// string name = 1;
inline void RegisterMsg::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RegisterMsg::name() const {
  // @@protoc_insertion_point(field_get:tmapreduce.RegisterMsg.name)
  return _internal_name();
}
inline void RegisterMsg::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:tmapreduce.RegisterMsg.name)
}
inline std::string* RegisterMsg::mutable_name() {
  // @@protoc_insertion_point(field_mutable:tmapreduce.RegisterMsg.name)
  return _internal_mutable_name();
}
inline const std::string& RegisterMsg::_internal_name() const {
  return name_.Get();
}
inline void RegisterMsg::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RegisterMsg::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tmapreduce.RegisterMsg.name)
}
inline void RegisterMsg::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:tmapreduce.RegisterMsg.name)
}
inline void RegisterMsg::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tmapreduce.RegisterMsg.name)
}
inline std::string* RegisterMsg::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RegisterMsg::release_name() {
  // @@protoc_insertion_point(field_release:tmapreduce.RegisterMsg.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RegisterMsg::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tmapreduce.RegisterMsg.name)
}
inline std::string* RegisterMsg::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tmapreduce.RegisterMsg.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RegisterMsg::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tmapreduce.RegisterMsg.name)
}

// string ep = 2;
inline void RegisterMsg::clear_ep() {
  ep_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RegisterMsg::ep() const {
  // @@protoc_insertion_point(field_get:tmapreduce.RegisterMsg.ep)
  return _internal_ep();
}
inline void RegisterMsg::set_ep(const std::string& value) {
  _internal_set_ep(value);
  // @@protoc_insertion_point(field_set:tmapreduce.RegisterMsg.ep)
}
inline std::string* RegisterMsg::mutable_ep() {
  // @@protoc_insertion_point(field_mutable:tmapreduce.RegisterMsg.ep)
  return _internal_mutable_ep();
}
inline const std::string& RegisterMsg::_internal_ep() const {
  return ep_.Get();
}
inline void RegisterMsg::_internal_set_ep(const std::string& value) {
  
  ep_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RegisterMsg::set_ep(std::string&& value) {
  
  ep_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tmapreduce.RegisterMsg.ep)
}
inline void RegisterMsg::set_ep(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ep_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:tmapreduce.RegisterMsg.ep)
}
inline void RegisterMsg::set_ep(const char* value,
    size_t size) {
  
  ep_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tmapreduce.RegisterMsg.ep)
}
inline std::string* RegisterMsg::_internal_mutable_ep() {
  
  return ep_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RegisterMsg::release_ep() {
  // @@protoc_insertion_point(field_release:tmapreduce.RegisterMsg.ep)
  return ep_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RegisterMsg::set_allocated_ep(std::string* ep) {
  if (ep != nullptr) {
    
  } else {
    
  }
  ep_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ep,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tmapreduce.RegisterMsg.ep)
}
inline std::string* RegisterMsg::unsafe_arena_release_ep() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tmapreduce.RegisterMsg.ep)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return ep_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RegisterMsg::unsafe_arena_set_allocated_ep(
    std::string* ep) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (ep != nullptr) {
    
  } else {
    
  }
  ep_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ep, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tmapreduce.RegisterMsg.ep)
}

// repeated string acceptable_job_type = 4;
inline int RegisterMsg::_internal_acceptable_job_type_size() const {
  return acceptable_job_type_.size();
}
inline int RegisterMsg::acceptable_job_type_size() const {
  return _internal_acceptable_job_type_size();
}
inline void RegisterMsg::clear_acceptable_job_type() {
  acceptable_job_type_.Clear();
}
inline std::string* RegisterMsg::add_acceptable_job_type() {
  // @@protoc_insertion_point(field_add_mutable:tmapreduce.RegisterMsg.acceptable_job_type)
  return _internal_add_acceptable_job_type();
}
inline const std::string& RegisterMsg::_internal_acceptable_job_type(int index) const {
  return acceptable_job_type_.Get(index);
}
inline const std::string& RegisterMsg::acceptable_job_type(int index) const {
  // @@protoc_insertion_point(field_get:tmapreduce.RegisterMsg.acceptable_job_type)
  return _internal_acceptable_job_type(index);
}
inline std::string* RegisterMsg::mutable_acceptable_job_type(int index) {
  // @@protoc_insertion_point(field_mutable:tmapreduce.RegisterMsg.acceptable_job_type)
  return acceptable_job_type_.Mutable(index);
}
inline void RegisterMsg::set_acceptable_job_type(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:tmapreduce.RegisterMsg.acceptable_job_type)
  acceptable_job_type_.Mutable(index)->assign(value);
}
inline void RegisterMsg::set_acceptable_job_type(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:tmapreduce.RegisterMsg.acceptable_job_type)
  acceptable_job_type_.Mutable(index)->assign(std::move(value));
}
inline void RegisterMsg::set_acceptable_job_type(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  acceptable_job_type_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tmapreduce.RegisterMsg.acceptable_job_type)
}
inline void RegisterMsg::set_acceptable_job_type(int index, const char* value, size_t size) {
  acceptable_job_type_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tmapreduce.RegisterMsg.acceptable_job_type)
}
inline std::string* RegisterMsg::_internal_add_acceptable_job_type() {
  return acceptable_job_type_.Add();
}
inline void RegisterMsg::add_acceptable_job_type(const std::string& value) {
  acceptable_job_type_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tmapreduce.RegisterMsg.acceptable_job_type)
}
inline void RegisterMsg::add_acceptable_job_type(std::string&& value) {
  acceptable_job_type_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:tmapreduce.RegisterMsg.acceptable_job_type)
}
inline void RegisterMsg::add_acceptable_job_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  acceptable_job_type_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tmapreduce.RegisterMsg.acceptable_job_type)
}
inline void RegisterMsg::add_acceptable_job_type(const char* value, size_t size) {
  acceptable_job_type_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tmapreduce.RegisterMsg.acceptable_job_type)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
RegisterMsg::acceptable_job_type() const {
  // @@protoc_insertion_point(field_list:tmapreduce.RegisterMsg.acceptable_job_type)
  return acceptable_job_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
RegisterMsg::mutable_acceptable_job_type() {
  // @@protoc_insertion_point(field_mutable_list:tmapreduce.RegisterMsg.acceptable_job_type)
  return &acceptable_job_type_;
}

// -------------------------------------------------------------------

// RegisterReplyMsg

// .tmapreduce.MasterReplyMsg reply = 1;
inline bool RegisterReplyMsg::_internal_has_reply() const {
  return this != internal_default_instance() && reply_ != nullptr;
}
inline bool RegisterReplyMsg::has_reply() const {
  return _internal_has_reply();
}
inline void RegisterReplyMsg::clear_reply() {
  if (GetArena() == nullptr && reply_ != nullptr) {
    delete reply_;
  }
  reply_ = nullptr;
}
inline const ::tmapreduce::MasterReplyMsg& RegisterReplyMsg::_internal_reply() const {
  const ::tmapreduce::MasterReplyMsg* p = reply_;
  return p != nullptr ? *p : *reinterpret_cast<const ::tmapreduce::MasterReplyMsg*>(
      &::tmapreduce::_MasterReplyMsg_default_instance_);
}
inline const ::tmapreduce::MasterReplyMsg& RegisterReplyMsg::reply() const {
  // @@protoc_insertion_point(field_get:tmapreduce.RegisterReplyMsg.reply)
  return _internal_reply();
}
inline void RegisterReplyMsg::unsafe_arena_set_allocated_reply(
    ::tmapreduce::MasterReplyMsg* reply) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reply_);
  }
  reply_ = reply;
  if (reply) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tmapreduce.RegisterReplyMsg.reply)
}
inline ::tmapreduce::MasterReplyMsg* RegisterReplyMsg::release_reply() {
  auto temp = unsafe_arena_release_reply();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::tmapreduce::MasterReplyMsg* RegisterReplyMsg::unsafe_arena_release_reply() {
  // @@protoc_insertion_point(field_release:tmapreduce.RegisterReplyMsg.reply)
  
  ::tmapreduce::MasterReplyMsg* temp = reply_;
  reply_ = nullptr;
  return temp;
}
inline ::tmapreduce::MasterReplyMsg* RegisterReplyMsg::_internal_mutable_reply() {
  
  if (reply_ == nullptr) {
    auto* p = CreateMaybeMessage<::tmapreduce::MasterReplyMsg>(GetArena());
    reply_ = p;
  }
  return reply_;
}
inline ::tmapreduce::MasterReplyMsg* RegisterReplyMsg::mutable_reply() {
  // @@protoc_insertion_point(field_mutable:tmapreduce.RegisterReplyMsg.reply)
  return _internal_mutable_reply();
}
inline void RegisterReplyMsg::set_allocated_reply(::tmapreduce::MasterReplyMsg* reply) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reply_;
  }
  if (reply) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(reply);
    if (message_arena != submessage_arena) {
      reply = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reply, submessage_arena);
    }
    
  } else {
    
  }
  reply_ = reply;
  // @@protoc_insertion_point(field_set_allocated:tmapreduce.RegisterReplyMsg.reply)
}

// uint32 worker_id = 2;
inline void RegisterReplyMsg::clear_worker_id() {
  worker_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RegisterReplyMsg::_internal_worker_id() const {
  return worker_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RegisterReplyMsg::worker_id() const {
  // @@protoc_insertion_point(field_get:tmapreduce.RegisterReplyMsg.worker_id)
  return _internal_worker_id();
}
inline void RegisterReplyMsg::_internal_set_worker_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  worker_id_ = value;
}
inline void RegisterReplyMsg::set_worker_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_worker_id(value);
  // @@protoc_insertion_point(field_set:tmapreduce.RegisterReplyMsg.worker_id)
}

// uint32 master_id = 3;
inline void RegisterReplyMsg::clear_master_id() {
  master_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RegisterReplyMsg::_internal_master_id() const {
  return master_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RegisterReplyMsg::master_id() const {
  // @@protoc_insertion_point(field_get:tmapreduce.RegisterReplyMsg.master_id)
  return _internal_master_id();
}
inline void RegisterReplyMsg::_internal_set_master_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  master_id_ = value;
}
inline void RegisterReplyMsg::set_master_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_master_id(value);
  // @@protoc_insertion_point(field_set:tmapreduce.RegisterReplyMsg.master_id)
}

// -------------------------------------------------------------------

// LaunchMsg_KV

// string key = 1;
inline void LaunchMsg_KV::clear_key() {
  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LaunchMsg_KV::key() const {
  // @@protoc_insertion_point(field_get:tmapreduce.LaunchMsg.KV.key)
  return _internal_key();
}
inline void LaunchMsg_KV::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:tmapreduce.LaunchMsg.KV.key)
}
inline std::string* LaunchMsg_KV::mutable_key() {
  // @@protoc_insertion_point(field_mutable:tmapreduce.LaunchMsg.KV.key)
  return _internal_mutable_key();
}
inline const std::string& LaunchMsg_KV::_internal_key() const {
  return key_.Get();
}
inline void LaunchMsg_KV::_internal_set_key(const std::string& value) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LaunchMsg_KV::set_key(std::string&& value) {
  
  key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tmapreduce.LaunchMsg.KV.key)
}
inline void LaunchMsg_KV::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:tmapreduce.LaunchMsg.KV.key)
}
inline void LaunchMsg_KV::set_key(const char* value,
    size_t size) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tmapreduce.LaunchMsg.KV.key)
}
inline std::string* LaunchMsg_KV::_internal_mutable_key() {
  
  return key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LaunchMsg_KV::release_key() {
  // @@protoc_insertion_point(field_release:tmapreduce.LaunchMsg.KV.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LaunchMsg_KV::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tmapreduce.LaunchMsg.KV.key)
}
inline std::string* LaunchMsg_KV::unsafe_arena_release_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tmapreduce.LaunchMsg.KV.key)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return key_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void LaunchMsg_KV::unsafe_arena_set_allocated_key(
    std::string* key) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (key != nullptr) {
    
  } else {
    
  }
  key_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      key, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tmapreduce.LaunchMsg.KV.key)
}

// string value = 2;
inline void LaunchMsg_KV::clear_value() {
  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LaunchMsg_KV::value() const {
  // @@protoc_insertion_point(field_get:tmapreduce.LaunchMsg.KV.value)
  return _internal_value();
}
inline void LaunchMsg_KV::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:tmapreduce.LaunchMsg.KV.value)
}
inline std::string* LaunchMsg_KV::mutable_value() {
  // @@protoc_insertion_point(field_mutable:tmapreduce.LaunchMsg.KV.value)
  return _internal_mutable_value();
}
inline const std::string& LaunchMsg_KV::_internal_value() const {
  return value_.Get();
}
inline void LaunchMsg_KV::_internal_set_value(const std::string& value) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LaunchMsg_KV::set_value(std::string&& value) {
  
  value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tmapreduce.LaunchMsg.KV.value)
}
inline void LaunchMsg_KV::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:tmapreduce.LaunchMsg.KV.value)
}
inline void LaunchMsg_KV::set_value(const char* value,
    size_t size) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tmapreduce.LaunchMsg.KV.value)
}
inline std::string* LaunchMsg_KV::_internal_mutable_value() {
  
  return value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LaunchMsg_KV::release_value() {
  // @@protoc_insertion_point(field_release:tmapreduce.LaunchMsg.KV.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LaunchMsg_KV::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tmapreduce.LaunchMsg.KV.value)
}
inline std::string* LaunchMsg_KV::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tmapreduce.LaunchMsg.KV.value)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return value_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void LaunchMsg_KV::unsafe_arena_set_allocated_value(
    std::string* value) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (value != nullptr) {
    
  } else {
    
  }
  value_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      value, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tmapreduce.LaunchMsg.KV.value)
}

// -------------------------------------------------------------------

// LaunchMsg

// string name = 1;
inline void LaunchMsg::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LaunchMsg::name() const {
  // @@protoc_insertion_point(field_get:tmapreduce.LaunchMsg.name)
  return _internal_name();
}
inline void LaunchMsg::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:tmapreduce.LaunchMsg.name)
}
inline std::string* LaunchMsg::mutable_name() {
  // @@protoc_insertion_point(field_mutable:tmapreduce.LaunchMsg.name)
  return _internal_mutable_name();
}
inline const std::string& LaunchMsg::_internal_name() const {
  return name_.Get();
}
inline void LaunchMsg::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LaunchMsg::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tmapreduce.LaunchMsg.name)
}
inline void LaunchMsg::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:tmapreduce.LaunchMsg.name)
}
inline void LaunchMsg::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tmapreduce.LaunchMsg.name)
}
inline std::string* LaunchMsg::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LaunchMsg::release_name() {
  // @@protoc_insertion_point(field_release:tmapreduce.LaunchMsg.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LaunchMsg::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tmapreduce.LaunchMsg.name)
}
inline std::string* LaunchMsg::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tmapreduce.LaunchMsg.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void LaunchMsg::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tmapreduce.LaunchMsg.name)
}

// string type = 2;
inline void LaunchMsg::clear_type() {
  type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LaunchMsg::type() const {
  // @@protoc_insertion_point(field_get:tmapreduce.LaunchMsg.type)
  return _internal_type();
}
inline void LaunchMsg::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:tmapreduce.LaunchMsg.type)
}
inline std::string* LaunchMsg::mutable_type() {
  // @@protoc_insertion_point(field_mutable:tmapreduce.LaunchMsg.type)
  return _internal_mutable_type();
}
inline const std::string& LaunchMsg::_internal_type() const {
  return type_.Get();
}
inline void LaunchMsg::_internal_set_type(const std::string& value) {
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LaunchMsg::set_type(std::string&& value) {
  
  type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tmapreduce.LaunchMsg.type)
}
inline void LaunchMsg::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:tmapreduce.LaunchMsg.type)
}
inline void LaunchMsg::set_type(const char* value,
    size_t size) {
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tmapreduce.LaunchMsg.type)
}
inline std::string* LaunchMsg::_internal_mutable_type() {
  
  return type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LaunchMsg::release_type() {
  // @@protoc_insertion_point(field_release:tmapreduce.LaunchMsg.type)
  return type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LaunchMsg::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tmapreduce.LaunchMsg.type)
}
inline std::string* LaunchMsg::unsafe_arena_release_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tmapreduce.LaunchMsg.type)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return type_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void LaunchMsg::unsafe_arena_set_allocated_type(
    std::string* type) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (type != nullptr) {
    
  } else {
    
  }
  type_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      type, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tmapreduce.LaunchMsg.type)
}

// uint32 mapper_num = 3;
inline void LaunchMsg::clear_mapper_num() {
  mapper_num_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LaunchMsg::_internal_mapper_num() const {
  return mapper_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LaunchMsg::mapper_num() const {
  // @@protoc_insertion_point(field_get:tmapreduce.LaunchMsg.mapper_num)
  return _internal_mapper_num();
}
inline void LaunchMsg::_internal_set_mapper_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  mapper_num_ = value;
}
inline void LaunchMsg::set_mapper_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_mapper_num(value);
  // @@protoc_insertion_point(field_set:tmapreduce.LaunchMsg.mapper_num)
}

// uint32 reducer_num = 4;
inline void LaunchMsg::clear_reducer_num() {
  reducer_num_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LaunchMsg::_internal_reducer_num() const {
  return reducer_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LaunchMsg::reducer_num() const {
  // @@protoc_insertion_point(field_get:tmapreduce.LaunchMsg.reducer_num)
  return _internal_reducer_num();
}
inline void LaunchMsg::_internal_set_reducer_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  reducer_num_ = value;
}
inline void LaunchMsg::set_reducer_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_reducer_num(value);
  // @@protoc_insertion_point(field_set:tmapreduce.LaunchMsg.reducer_num)
}

// string token = 5;
inline void LaunchMsg::clear_token() {
  token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LaunchMsg::token() const {
  // @@protoc_insertion_point(field_get:tmapreduce.LaunchMsg.token)
  return _internal_token();
}
inline void LaunchMsg::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:tmapreduce.LaunchMsg.token)
}
inline std::string* LaunchMsg::mutable_token() {
  // @@protoc_insertion_point(field_mutable:tmapreduce.LaunchMsg.token)
  return _internal_mutable_token();
}
inline const std::string& LaunchMsg::_internal_token() const {
  return token_.Get();
}
inline void LaunchMsg::_internal_set_token(const std::string& value) {
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LaunchMsg::set_token(std::string&& value) {
  
  token_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tmapreduce.LaunchMsg.token)
}
inline void LaunchMsg::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:tmapreduce.LaunchMsg.token)
}
inline void LaunchMsg::set_token(const char* value,
    size_t size) {
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tmapreduce.LaunchMsg.token)
}
inline std::string* LaunchMsg::_internal_mutable_token() {
  
  return token_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LaunchMsg::release_token() {
  // @@protoc_insertion_point(field_release:tmapreduce.LaunchMsg.token)
  return token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LaunchMsg::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tmapreduce.LaunchMsg.token)
}
inline std::string* LaunchMsg::unsafe_arena_release_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tmapreduce.LaunchMsg.token)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return token_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void LaunchMsg::unsafe_arena_set_allocated_token(
    std::string* token) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (token != nullptr) {
    
  } else {
    
  }
  token_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      token, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tmapreduce.LaunchMsg.token)
}

// repeated .tmapreduce.LaunchMsg.KV kvs = 6;
inline int LaunchMsg::_internal_kvs_size() const {
  return kvs_.size();
}
inline int LaunchMsg::kvs_size() const {
  return _internal_kvs_size();
}
inline void LaunchMsg::clear_kvs() {
  kvs_.Clear();
}
inline ::tmapreduce::LaunchMsg_KV* LaunchMsg::mutable_kvs(int index) {
  // @@protoc_insertion_point(field_mutable:tmapreduce.LaunchMsg.kvs)
  return kvs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tmapreduce::LaunchMsg_KV >*
LaunchMsg::mutable_kvs() {
  // @@protoc_insertion_point(field_mutable_list:tmapreduce.LaunchMsg.kvs)
  return &kvs_;
}
inline const ::tmapreduce::LaunchMsg_KV& LaunchMsg::_internal_kvs(int index) const {
  return kvs_.Get(index);
}
inline const ::tmapreduce::LaunchMsg_KV& LaunchMsg::kvs(int index) const {
  // @@protoc_insertion_point(field_get:tmapreduce.LaunchMsg.kvs)
  return _internal_kvs(index);
}
inline ::tmapreduce::LaunchMsg_KV* LaunchMsg::_internal_add_kvs() {
  return kvs_.Add();
}
inline ::tmapreduce::LaunchMsg_KV* LaunchMsg::add_kvs() {
  // @@protoc_insertion_point(field_add:tmapreduce.LaunchMsg.kvs)
  return _internal_add_kvs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tmapreduce::LaunchMsg_KV >&
LaunchMsg::kvs() const {
  // @@protoc_insertion_point(field_list:tmapreduce.LaunchMsg.kvs)
  return kvs_;
}

// -------------------------------------------------------------------

// LaunchReplyMsg

// .tmapreduce.MasterReplyMsg reply = 1;
inline bool LaunchReplyMsg::_internal_has_reply() const {
  return this != internal_default_instance() && reply_ != nullptr;
}
inline bool LaunchReplyMsg::has_reply() const {
  return _internal_has_reply();
}
inline void LaunchReplyMsg::clear_reply() {
  if (GetArena() == nullptr && reply_ != nullptr) {
    delete reply_;
  }
  reply_ = nullptr;
}
inline const ::tmapreduce::MasterReplyMsg& LaunchReplyMsg::_internal_reply() const {
  const ::tmapreduce::MasterReplyMsg* p = reply_;
  return p != nullptr ? *p : *reinterpret_cast<const ::tmapreduce::MasterReplyMsg*>(
      &::tmapreduce::_MasterReplyMsg_default_instance_);
}
inline const ::tmapreduce::MasterReplyMsg& LaunchReplyMsg::reply() const {
  // @@protoc_insertion_point(field_get:tmapreduce.LaunchReplyMsg.reply)
  return _internal_reply();
}
inline void LaunchReplyMsg::unsafe_arena_set_allocated_reply(
    ::tmapreduce::MasterReplyMsg* reply) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reply_);
  }
  reply_ = reply;
  if (reply) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tmapreduce.LaunchReplyMsg.reply)
}
inline ::tmapreduce::MasterReplyMsg* LaunchReplyMsg::release_reply() {
  auto temp = unsafe_arena_release_reply();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::tmapreduce::MasterReplyMsg* LaunchReplyMsg::unsafe_arena_release_reply() {
  // @@protoc_insertion_point(field_release:tmapreduce.LaunchReplyMsg.reply)
  
  ::tmapreduce::MasterReplyMsg* temp = reply_;
  reply_ = nullptr;
  return temp;
}
inline ::tmapreduce::MasterReplyMsg* LaunchReplyMsg::_internal_mutable_reply() {
  
  if (reply_ == nullptr) {
    auto* p = CreateMaybeMessage<::tmapreduce::MasterReplyMsg>(GetArena());
    reply_ = p;
  }
  return reply_;
}
inline ::tmapreduce::MasterReplyMsg* LaunchReplyMsg::mutable_reply() {
  // @@protoc_insertion_point(field_mutable:tmapreduce.LaunchReplyMsg.reply)
  return _internal_mutable_reply();
}
inline void LaunchReplyMsg::set_allocated_reply(::tmapreduce::MasterReplyMsg* reply) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reply_;
  }
  if (reply) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(reply);
    if (message_arena != submessage_arena) {
      reply = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reply, submessage_arena);
    }
    
  } else {
    
  }
  reply_ = reply;
  // @@protoc_insertion_point(field_set_allocated:tmapreduce.LaunchReplyMsg.reply)
}

// uint32 job_id = 2;
inline void LaunchReplyMsg::clear_job_id() {
  job_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LaunchReplyMsg::_internal_job_id() const {
  return job_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LaunchReplyMsg::job_id() const {
  // @@protoc_insertion_point(field_get:tmapreduce.LaunchReplyMsg.job_id)
  return _internal_job_id();
}
inline void LaunchReplyMsg::_internal_set_job_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  job_id_ = value;
}
inline void LaunchReplyMsg::set_job_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_job_id(value);
  // @@protoc_insertion_point(field_set:tmapreduce.LaunchReplyMsg.job_id)
}

// -------------------------------------------------------------------

// CompleteMapMsg_KV

// string key = 1;
inline void CompleteMapMsg_KV::clear_key() {
  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CompleteMapMsg_KV::key() const {
  // @@protoc_insertion_point(field_get:tmapreduce.CompleteMapMsg.KV.key)
  return _internal_key();
}
inline void CompleteMapMsg_KV::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:tmapreduce.CompleteMapMsg.KV.key)
}
inline std::string* CompleteMapMsg_KV::mutable_key() {
  // @@protoc_insertion_point(field_mutable:tmapreduce.CompleteMapMsg.KV.key)
  return _internal_mutable_key();
}
inline const std::string& CompleteMapMsg_KV::_internal_key() const {
  return key_.Get();
}
inline void CompleteMapMsg_KV::_internal_set_key(const std::string& value) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CompleteMapMsg_KV::set_key(std::string&& value) {
  
  key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tmapreduce.CompleteMapMsg.KV.key)
}
inline void CompleteMapMsg_KV::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:tmapreduce.CompleteMapMsg.KV.key)
}
inline void CompleteMapMsg_KV::set_key(const char* value,
    size_t size) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tmapreduce.CompleteMapMsg.KV.key)
}
inline std::string* CompleteMapMsg_KV::_internal_mutable_key() {
  
  return key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CompleteMapMsg_KV::release_key() {
  // @@protoc_insertion_point(field_release:tmapreduce.CompleteMapMsg.KV.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CompleteMapMsg_KV::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tmapreduce.CompleteMapMsg.KV.key)
}
inline std::string* CompleteMapMsg_KV::unsafe_arena_release_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tmapreduce.CompleteMapMsg.KV.key)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return key_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CompleteMapMsg_KV::unsafe_arena_set_allocated_key(
    std::string* key) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (key != nullptr) {
    
  } else {
    
  }
  key_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      key, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tmapreduce.CompleteMapMsg.KV.key)
}

// string value = 2;
inline void CompleteMapMsg_KV::clear_value() {
  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CompleteMapMsg_KV::value() const {
  // @@protoc_insertion_point(field_get:tmapreduce.CompleteMapMsg.KV.value)
  return _internal_value();
}
inline void CompleteMapMsg_KV::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:tmapreduce.CompleteMapMsg.KV.value)
}
inline std::string* CompleteMapMsg_KV::mutable_value() {
  // @@protoc_insertion_point(field_mutable:tmapreduce.CompleteMapMsg.KV.value)
  return _internal_mutable_value();
}
inline const std::string& CompleteMapMsg_KV::_internal_value() const {
  return value_.Get();
}
inline void CompleteMapMsg_KV::_internal_set_value(const std::string& value) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CompleteMapMsg_KV::set_value(std::string&& value) {
  
  value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tmapreduce.CompleteMapMsg.KV.value)
}
inline void CompleteMapMsg_KV::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:tmapreduce.CompleteMapMsg.KV.value)
}
inline void CompleteMapMsg_KV::set_value(const char* value,
    size_t size) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tmapreduce.CompleteMapMsg.KV.value)
}
inline std::string* CompleteMapMsg_KV::_internal_mutable_value() {
  
  return value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CompleteMapMsg_KV::release_value() {
  // @@protoc_insertion_point(field_release:tmapreduce.CompleteMapMsg.KV.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CompleteMapMsg_KV::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tmapreduce.CompleteMapMsg.KV.value)
}
inline std::string* CompleteMapMsg_KV::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tmapreduce.CompleteMapMsg.KV.value)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return value_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CompleteMapMsg_KV::unsafe_arena_set_allocated_value(
    std::string* value) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (value != nullptr) {
    
  } else {
    
  }
  value_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      value, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tmapreduce.CompleteMapMsg.KV.value)
}

// -------------------------------------------------------------------

// CompleteMapMsg

// uint32 job_id = 1;
inline void CompleteMapMsg::clear_job_id() {
  job_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CompleteMapMsg::_internal_job_id() const {
  return job_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CompleteMapMsg::job_id() const {
  // @@protoc_insertion_point(field_get:tmapreduce.CompleteMapMsg.job_id)
  return _internal_job_id();
}
inline void CompleteMapMsg::_internal_set_job_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  job_id_ = value;
}
inline void CompleteMapMsg::set_job_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_job_id(value);
  // @@protoc_insertion_point(field_set:tmapreduce.CompleteMapMsg.job_id)
}

// uint32 subjob_id = 2;
inline void CompleteMapMsg::clear_subjob_id() {
  subjob_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CompleteMapMsg::_internal_subjob_id() const {
  return subjob_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CompleteMapMsg::subjob_id() const {
  // @@protoc_insertion_point(field_get:tmapreduce.CompleteMapMsg.subjob_id)
  return _internal_subjob_id();
}
inline void CompleteMapMsg::_internal_set_subjob_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  subjob_id_ = value;
}
inline void CompleteMapMsg::set_subjob_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_subjob_id(value);
  // @@protoc_insertion_point(field_set:tmapreduce.CompleteMapMsg.subjob_id)
}

// string worker_name = 3;
inline void CompleteMapMsg::clear_worker_name() {
  worker_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CompleteMapMsg::worker_name() const {
  // @@protoc_insertion_point(field_get:tmapreduce.CompleteMapMsg.worker_name)
  return _internal_worker_name();
}
inline void CompleteMapMsg::set_worker_name(const std::string& value) {
  _internal_set_worker_name(value);
  // @@protoc_insertion_point(field_set:tmapreduce.CompleteMapMsg.worker_name)
}
inline std::string* CompleteMapMsg::mutable_worker_name() {
  // @@protoc_insertion_point(field_mutable:tmapreduce.CompleteMapMsg.worker_name)
  return _internal_mutable_worker_name();
}
inline const std::string& CompleteMapMsg::_internal_worker_name() const {
  return worker_name_.Get();
}
inline void CompleteMapMsg::_internal_set_worker_name(const std::string& value) {
  
  worker_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CompleteMapMsg::set_worker_name(std::string&& value) {
  
  worker_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tmapreduce.CompleteMapMsg.worker_name)
}
inline void CompleteMapMsg::set_worker_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  worker_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:tmapreduce.CompleteMapMsg.worker_name)
}
inline void CompleteMapMsg::set_worker_name(const char* value,
    size_t size) {
  
  worker_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tmapreduce.CompleteMapMsg.worker_name)
}
inline std::string* CompleteMapMsg::_internal_mutable_worker_name() {
  
  return worker_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CompleteMapMsg::release_worker_name() {
  // @@protoc_insertion_point(field_release:tmapreduce.CompleteMapMsg.worker_name)
  return worker_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CompleteMapMsg::set_allocated_worker_name(std::string* worker_name) {
  if (worker_name != nullptr) {
    
  } else {
    
  }
  worker_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), worker_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tmapreduce.CompleteMapMsg.worker_name)
}
inline std::string* CompleteMapMsg::unsafe_arena_release_worker_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tmapreduce.CompleteMapMsg.worker_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return worker_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CompleteMapMsg::unsafe_arena_set_allocated_worker_name(
    std::string* worker_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (worker_name != nullptr) {
    
  } else {
    
  }
  worker_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      worker_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tmapreduce.CompleteMapMsg.worker_name)
}

// .tmapreduce.WorkerState state = 4;
inline void CompleteMapMsg::clear_state() {
  state_ = 0;
}
inline ::tmapreduce::WorkerState CompleteMapMsg::_internal_state() const {
  return static_cast< ::tmapreduce::WorkerState >(state_);
}
inline ::tmapreduce::WorkerState CompleteMapMsg::state() const {
  // @@protoc_insertion_point(field_get:tmapreduce.CompleteMapMsg.state)
  return _internal_state();
}
inline void CompleteMapMsg::_internal_set_state(::tmapreduce::WorkerState value) {
  
  state_ = value;
}
inline void CompleteMapMsg::set_state(::tmapreduce::WorkerState value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:tmapreduce.CompleteMapMsg.state)
}

// repeated .tmapreduce.CompleteMapMsg.KV map_result = 5;
inline int CompleteMapMsg::_internal_map_result_size() const {
  return map_result_.size();
}
inline int CompleteMapMsg::map_result_size() const {
  return _internal_map_result_size();
}
inline void CompleteMapMsg::clear_map_result() {
  map_result_.Clear();
}
inline ::tmapreduce::CompleteMapMsg_KV* CompleteMapMsg::mutable_map_result(int index) {
  // @@protoc_insertion_point(field_mutable:tmapreduce.CompleteMapMsg.map_result)
  return map_result_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tmapreduce::CompleteMapMsg_KV >*
CompleteMapMsg::mutable_map_result() {
  // @@protoc_insertion_point(field_mutable_list:tmapreduce.CompleteMapMsg.map_result)
  return &map_result_;
}
inline const ::tmapreduce::CompleteMapMsg_KV& CompleteMapMsg::_internal_map_result(int index) const {
  return map_result_.Get(index);
}
inline const ::tmapreduce::CompleteMapMsg_KV& CompleteMapMsg::map_result(int index) const {
  // @@protoc_insertion_point(field_get:tmapreduce.CompleteMapMsg.map_result)
  return _internal_map_result(index);
}
inline ::tmapreduce::CompleteMapMsg_KV* CompleteMapMsg::_internal_add_map_result() {
  return map_result_.Add();
}
inline ::tmapreduce::CompleteMapMsg_KV* CompleteMapMsg::add_map_result() {
  // @@protoc_insertion_point(field_add:tmapreduce.CompleteMapMsg.map_result)
  return _internal_add_map_result();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tmapreduce::CompleteMapMsg_KV >&
CompleteMapMsg::map_result() const {
  // @@protoc_insertion_point(field_list:tmapreduce.CompleteMapMsg.map_result)
  return map_result_;
}

// -------------------------------------------------------------------

// CompleteReduceMsg

// uint32 job_id = 1;
inline void CompleteReduceMsg::clear_job_id() {
  job_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CompleteReduceMsg::_internal_job_id() const {
  return job_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CompleteReduceMsg::job_id() const {
  // @@protoc_insertion_point(field_get:tmapreduce.CompleteReduceMsg.job_id)
  return _internal_job_id();
}
inline void CompleteReduceMsg::_internal_set_job_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  job_id_ = value;
}
inline void CompleteReduceMsg::set_job_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_job_id(value);
  // @@protoc_insertion_point(field_set:tmapreduce.CompleteReduceMsg.job_id)
}

// uint32 subjob_id = 2;
inline void CompleteReduceMsg::clear_subjob_id() {
  subjob_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CompleteReduceMsg::_internal_subjob_id() const {
  return subjob_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CompleteReduceMsg::subjob_id() const {
  // @@protoc_insertion_point(field_get:tmapreduce.CompleteReduceMsg.subjob_id)
  return _internal_subjob_id();
}
inline void CompleteReduceMsg::_internal_set_subjob_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  subjob_id_ = value;
}
inline void CompleteReduceMsg::set_subjob_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_subjob_id(value);
  // @@protoc_insertion_point(field_set:tmapreduce.CompleteReduceMsg.subjob_id)
}

// string worker_name = 3;
inline void CompleteReduceMsg::clear_worker_name() {
  worker_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CompleteReduceMsg::worker_name() const {
  // @@protoc_insertion_point(field_get:tmapreduce.CompleteReduceMsg.worker_name)
  return _internal_worker_name();
}
inline void CompleteReduceMsg::set_worker_name(const std::string& value) {
  _internal_set_worker_name(value);
  // @@protoc_insertion_point(field_set:tmapreduce.CompleteReduceMsg.worker_name)
}
inline std::string* CompleteReduceMsg::mutable_worker_name() {
  // @@protoc_insertion_point(field_mutable:tmapreduce.CompleteReduceMsg.worker_name)
  return _internal_mutable_worker_name();
}
inline const std::string& CompleteReduceMsg::_internal_worker_name() const {
  return worker_name_.Get();
}
inline void CompleteReduceMsg::_internal_set_worker_name(const std::string& value) {
  
  worker_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CompleteReduceMsg::set_worker_name(std::string&& value) {
  
  worker_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tmapreduce.CompleteReduceMsg.worker_name)
}
inline void CompleteReduceMsg::set_worker_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  worker_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:tmapreduce.CompleteReduceMsg.worker_name)
}
inline void CompleteReduceMsg::set_worker_name(const char* value,
    size_t size) {
  
  worker_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tmapreduce.CompleteReduceMsg.worker_name)
}
inline std::string* CompleteReduceMsg::_internal_mutable_worker_name() {
  
  return worker_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CompleteReduceMsg::release_worker_name() {
  // @@protoc_insertion_point(field_release:tmapreduce.CompleteReduceMsg.worker_name)
  return worker_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CompleteReduceMsg::set_allocated_worker_name(std::string* worker_name) {
  if (worker_name != nullptr) {
    
  } else {
    
  }
  worker_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), worker_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tmapreduce.CompleteReduceMsg.worker_name)
}
inline std::string* CompleteReduceMsg::unsafe_arena_release_worker_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tmapreduce.CompleteReduceMsg.worker_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return worker_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CompleteReduceMsg::unsafe_arena_set_allocated_worker_name(
    std::string* worker_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (worker_name != nullptr) {
    
  } else {
    
  }
  worker_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      worker_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tmapreduce.CompleteReduceMsg.worker_name)
}

// .tmapreduce.WorkerState state = 4;
inline void CompleteReduceMsg::clear_state() {
  state_ = 0;
}
inline ::tmapreduce::WorkerState CompleteReduceMsg::_internal_state() const {
  return static_cast< ::tmapreduce::WorkerState >(state_);
}
inline ::tmapreduce::WorkerState CompleteReduceMsg::state() const {
  // @@protoc_insertion_point(field_get:tmapreduce.CompleteReduceMsg.state)
  return _internal_state();
}
inline void CompleteReduceMsg::_internal_set_state(::tmapreduce::WorkerState value) {
  
  state_ = value;
}
inline void CompleteReduceMsg::set_state(::tmapreduce::WorkerState value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:tmapreduce.CompleteReduceMsg.state)
}

// repeated string reduce_result = 5;
inline int CompleteReduceMsg::_internal_reduce_result_size() const {
  return reduce_result_.size();
}
inline int CompleteReduceMsg::reduce_result_size() const {
  return _internal_reduce_result_size();
}
inline void CompleteReduceMsg::clear_reduce_result() {
  reduce_result_.Clear();
}
inline std::string* CompleteReduceMsg::add_reduce_result() {
  // @@protoc_insertion_point(field_add_mutable:tmapreduce.CompleteReduceMsg.reduce_result)
  return _internal_add_reduce_result();
}
inline const std::string& CompleteReduceMsg::_internal_reduce_result(int index) const {
  return reduce_result_.Get(index);
}
inline const std::string& CompleteReduceMsg::reduce_result(int index) const {
  // @@protoc_insertion_point(field_get:tmapreduce.CompleteReduceMsg.reduce_result)
  return _internal_reduce_result(index);
}
inline std::string* CompleteReduceMsg::mutable_reduce_result(int index) {
  // @@protoc_insertion_point(field_mutable:tmapreduce.CompleteReduceMsg.reduce_result)
  return reduce_result_.Mutable(index);
}
inline void CompleteReduceMsg::set_reduce_result(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:tmapreduce.CompleteReduceMsg.reduce_result)
  reduce_result_.Mutable(index)->assign(value);
}
inline void CompleteReduceMsg::set_reduce_result(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:tmapreduce.CompleteReduceMsg.reduce_result)
  reduce_result_.Mutable(index)->assign(std::move(value));
}
inline void CompleteReduceMsg::set_reduce_result(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  reduce_result_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tmapreduce.CompleteReduceMsg.reduce_result)
}
inline void CompleteReduceMsg::set_reduce_result(int index, const char* value, size_t size) {
  reduce_result_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tmapreduce.CompleteReduceMsg.reduce_result)
}
inline std::string* CompleteReduceMsg::_internal_add_reduce_result() {
  return reduce_result_.Add();
}
inline void CompleteReduceMsg::add_reduce_result(const std::string& value) {
  reduce_result_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tmapreduce.CompleteReduceMsg.reduce_result)
}
inline void CompleteReduceMsg::add_reduce_result(std::string&& value) {
  reduce_result_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:tmapreduce.CompleteReduceMsg.reduce_result)
}
inline void CompleteReduceMsg::add_reduce_result(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  reduce_result_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tmapreduce.CompleteReduceMsg.reduce_result)
}
inline void CompleteReduceMsg::add_reduce_result(const char* value, size_t size) {
  reduce_result_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tmapreduce.CompleteReduceMsg.reduce_result)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CompleteReduceMsg::reduce_result() const {
  // @@protoc_insertion_point(field_list:tmapreduce.CompleteReduceMsg.reduce_result)
  return reduce_result_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CompleteReduceMsg::mutable_reduce_result() {
  // @@protoc_insertion_point(field_mutable_list:tmapreduce.CompleteReduceMsg.reduce_result)
  return &reduce_result_;
}

// -------------------------------------------------------------------

// GetResultMsg

// uint32 job_id = 1;
inline void GetResultMsg::clear_job_id() {
  job_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetResultMsg::_internal_job_id() const {
  return job_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetResultMsg::job_id() const {
  // @@protoc_insertion_point(field_get:tmapreduce.GetResultMsg.job_id)
  return _internal_job_id();
}
inline void GetResultMsg::_internal_set_job_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  job_id_ = value;
}
inline void GetResultMsg::set_job_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_job_id(value);
  // @@protoc_insertion_point(field_set:tmapreduce.GetResultMsg.job_id)
}

// string token = 2;
inline void GetResultMsg::clear_token() {
  token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetResultMsg::token() const {
  // @@protoc_insertion_point(field_get:tmapreduce.GetResultMsg.token)
  return _internal_token();
}
inline void GetResultMsg::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:tmapreduce.GetResultMsg.token)
}
inline std::string* GetResultMsg::mutable_token() {
  // @@protoc_insertion_point(field_mutable:tmapreduce.GetResultMsg.token)
  return _internal_mutable_token();
}
inline const std::string& GetResultMsg::_internal_token() const {
  return token_.Get();
}
inline void GetResultMsg::_internal_set_token(const std::string& value) {
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetResultMsg::set_token(std::string&& value) {
  
  token_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tmapreduce.GetResultMsg.token)
}
inline void GetResultMsg::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:tmapreduce.GetResultMsg.token)
}
inline void GetResultMsg::set_token(const char* value,
    size_t size) {
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tmapreduce.GetResultMsg.token)
}
inline std::string* GetResultMsg::_internal_mutable_token() {
  
  return token_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetResultMsg::release_token() {
  // @@protoc_insertion_point(field_release:tmapreduce.GetResultMsg.token)
  return token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetResultMsg::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tmapreduce.GetResultMsg.token)
}
inline std::string* GetResultMsg::unsafe_arena_release_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tmapreduce.GetResultMsg.token)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return token_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetResultMsg::unsafe_arena_set_allocated_token(
    std::string* token) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (token != nullptr) {
    
  } else {
    
  }
  token_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      token, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tmapreduce.GetResultMsg.token)
}

// -------------------------------------------------------------------

// GetResultReplyMsg

// .tmapreduce.MasterReplyMsg reply = 1;
inline bool GetResultReplyMsg::_internal_has_reply() const {
  return this != internal_default_instance() && reply_ != nullptr;
}
inline bool GetResultReplyMsg::has_reply() const {
  return _internal_has_reply();
}
inline void GetResultReplyMsg::clear_reply() {
  if (GetArena() == nullptr && reply_ != nullptr) {
    delete reply_;
  }
  reply_ = nullptr;
}
inline const ::tmapreduce::MasterReplyMsg& GetResultReplyMsg::_internal_reply() const {
  const ::tmapreduce::MasterReplyMsg* p = reply_;
  return p != nullptr ? *p : *reinterpret_cast<const ::tmapreduce::MasterReplyMsg*>(
      &::tmapreduce::_MasterReplyMsg_default_instance_);
}
inline const ::tmapreduce::MasterReplyMsg& GetResultReplyMsg::reply() const {
  // @@protoc_insertion_point(field_get:tmapreduce.GetResultReplyMsg.reply)
  return _internal_reply();
}
inline void GetResultReplyMsg::unsafe_arena_set_allocated_reply(
    ::tmapreduce::MasterReplyMsg* reply) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reply_);
  }
  reply_ = reply;
  if (reply) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tmapreduce.GetResultReplyMsg.reply)
}
inline ::tmapreduce::MasterReplyMsg* GetResultReplyMsg::release_reply() {
  auto temp = unsafe_arena_release_reply();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::tmapreduce::MasterReplyMsg* GetResultReplyMsg::unsafe_arena_release_reply() {
  // @@protoc_insertion_point(field_release:tmapreduce.GetResultReplyMsg.reply)
  
  ::tmapreduce::MasterReplyMsg* temp = reply_;
  reply_ = nullptr;
  return temp;
}
inline ::tmapreduce::MasterReplyMsg* GetResultReplyMsg::_internal_mutable_reply() {
  
  if (reply_ == nullptr) {
    auto* p = CreateMaybeMessage<::tmapreduce::MasterReplyMsg>(GetArena());
    reply_ = p;
  }
  return reply_;
}
inline ::tmapreduce::MasterReplyMsg* GetResultReplyMsg::mutable_reply() {
  // @@protoc_insertion_point(field_mutable:tmapreduce.GetResultReplyMsg.reply)
  return _internal_mutable_reply();
}
inline void GetResultReplyMsg::set_allocated_reply(::tmapreduce::MasterReplyMsg* reply) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reply_;
  }
  if (reply) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(reply);
    if (message_arena != submessage_arena) {
      reply = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reply, submessage_arena);
    }
    
  } else {
    
  }
  reply_ = reply;
  // @@protoc_insertion_point(field_set_allocated:tmapreduce.GetResultReplyMsg.reply)
}

// repeated string results = 2;
inline int GetResultReplyMsg::_internal_results_size() const {
  return results_.size();
}
inline int GetResultReplyMsg::results_size() const {
  return _internal_results_size();
}
inline void GetResultReplyMsg::clear_results() {
  results_.Clear();
}
inline std::string* GetResultReplyMsg::add_results() {
  // @@protoc_insertion_point(field_add_mutable:tmapreduce.GetResultReplyMsg.results)
  return _internal_add_results();
}
inline const std::string& GetResultReplyMsg::_internal_results(int index) const {
  return results_.Get(index);
}
inline const std::string& GetResultReplyMsg::results(int index) const {
  // @@protoc_insertion_point(field_get:tmapreduce.GetResultReplyMsg.results)
  return _internal_results(index);
}
inline std::string* GetResultReplyMsg::mutable_results(int index) {
  // @@protoc_insertion_point(field_mutable:tmapreduce.GetResultReplyMsg.results)
  return results_.Mutable(index);
}
inline void GetResultReplyMsg::set_results(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:tmapreduce.GetResultReplyMsg.results)
  results_.Mutable(index)->assign(value);
}
inline void GetResultReplyMsg::set_results(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:tmapreduce.GetResultReplyMsg.results)
  results_.Mutable(index)->assign(std::move(value));
}
inline void GetResultReplyMsg::set_results(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  results_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tmapreduce.GetResultReplyMsg.results)
}
inline void GetResultReplyMsg::set_results(int index, const char* value, size_t size) {
  results_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tmapreduce.GetResultReplyMsg.results)
}
inline std::string* GetResultReplyMsg::_internal_add_results() {
  return results_.Add();
}
inline void GetResultReplyMsg::add_results(const std::string& value) {
  results_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tmapreduce.GetResultReplyMsg.results)
}
inline void GetResultReplyMsg::add_results(std::string&& value) {
  results_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:tmapreduce.GetResultReplyMsg.results)
}
inline void GetResultReplyMsg::add_results(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  results_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tmapreduce.GetResultReplyMsg.results)
}
inline void GetResultReplyMsg::add_results(const char* value, size_t size) {
  results_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tmapreduce.GetResultReplyMsg.results)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetResultReplyMsg::results() const {
  // @@protoc_insertion_point(field_list:tmapreduce.GetResultReplyMsg.results)
  return results_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetResultReplyMsg::mutable_results() {
  // @@protoc_insertion_point(field_mutable_list:tmapreduce.GetResultReplyMsg.results)
  return &results_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace tmapreduce

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_master_5fservice_2eproto
