syntax = "proto3";

import "state.proto";

package mapreduce;

option cc_generic_services = true;

message MasterReplyMsg {
  bool ok = 1;
  string msg = 2;
}

message RegisterMsg {
  string address = 1;
  uint32 port = 2;
}

message RegisterReplyMsg {
  MasterReplyMsg reply = 1;
  uint32 worker_id = 2;
  uint32 master_id = 3;
}

message JobMsg {
  message KV {
    string key = 1;
    string value = 2;
  }
  string name = 1;
  string type = 2;
  uint32 mapper_num = 3;
  uint32 reducer_num = 4;
  repeated KV kvs = 5;
}

message LaunchReplyMsg {
  MasterReplyMsg reply = 1;
  uint32 job_id = 2;
}

message MapResultMsg {
  message KV {
    string key = 1;
    string value = 2;
  }
  uint32 job_id = 1;
  uint32 sub_job_id = 2;
  uint32 worker_id = 3;
  WorkerState state = 4;
  repeated KV map_result = 5;
}

message ReduceResultMsg {
  uint32 job_id = 1;
  uint32 sub_job_id = 2;
  uint32 worker_id = 3;
  WorkerState state = 4;
  repeated string reduce_result = 5;
}

service MasterService {
  rpc Register(RegisterMsg) returns (RegisterReplyMsg) {}
  rpc Launch(JobMsg) returns (LaunchReplyMsg) {}
  rpc CompleteMap(MapResultMsg) returns (MasterReplyMsg) {}
  rpc CompleteReduce(ReduceResultMsg) returns (MasterReplyMsg) {}
  // TODO: Get result and check job stage
}