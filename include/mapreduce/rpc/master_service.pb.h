// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: master_service.proto

#ifndef PROTOBUF_INCLUDED_master_5fservice_2eproto
#define PROTOBUF_INCLUDED_master_5fservice_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_master_5fservice_2eproto 

namespace protobuf_master_5fservice_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[6];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_master_5fservice_2eproto
namespace mapreduce {
class Job;
class JobDefaultTypeInternal;
extern JobDefaultTypeInternal _Job_default_instance_;
class Job_KV;
class Job_KVDefaultTypeInternal;
extern Job_KVDefaultTypeInternal _Job_KV_default_instance_;
class LaunchReply;
class LaunchReplyDefaultTypeInternal;
extern LaunchReplyDefaultTypeInternal _LaunchReply_default_instance_;
class MasterReplyMsg;
class MasterReplyMsgDefaultTypeInternal;
extern MasterReplyMsgDefaultTypeInternal _MasterReplyMsg_default_instance_;
class RegisterInfo;
class RegisterInfoDefaultTypeInternal;
extern RegisterInfoDefaultTypeInternal _RegisterInfo_default_instance_;
class RegisterReply;
class RegisterReplyDefaultTypeInternal;
extern RegisterReplyDefaultTypeInternal _RegisterReply_default_instance_;
}  // namespace mapreduce
namespace google {
namespace protobuf {
template<> ::mapreduce::Job* Arena::CreateMaybeMessage<::mapreduce::Job>(Arena*);
template<> ::mapreduce::Job_KV* Arena::CreateMaybeMessage<::mapreduce::Job_KV>(Arena*);
template<> ::mapreduce::LaunchReply* Arena::CreateMaybeMessage<::mapreduce::LaunchReply>(Arena*);
template<> ::mapreduce::MasterReplyMsg* Arena::CreateMaybeMessage<::mapreduce::MasterReplyMsg>(Arena*);
template<> ::mapreduce::RegisterInfo* Arena::CreateMaybeMessage<::mapreduce::RegisterInfo>(Arena*);
template<> ::mapreduce::RegisterReply* Arena::CreateMaybeMessage<::mapreduce::RegisterReply>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace mapreduce {

// ===================================================================

class MasterReplyMsg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mapreduce.MasterReplyMsg) */ {
 public:
  MasterReplyMsg();
  virtual ~MasterReplyMsg();

  MasterReplyMsg(const MasterReplyMsg& from);

  inline MasterReplyMsg& operator=(const MasterReplyMsg& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MasterReplyMsg(MasterReplyMsg&& from) noexcept
    : MasterReplyMsg() {
    *this = ::std::move(from);
  }

  inline MasterReplyMsg& operator=(MasterReplyMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MasterReplyMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MasterReplyMsg* internal_default_instance() {
    return reinterpret_cast<const MasterReplyMsg*>(
               &_MasterReplyMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(MasterReplyMsg* other);
  friend void swap(MasterReplyMsg& a, MasterReplyMsg& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MasterReplyMsg* New() const final {
    return CreateMaybeMessage<MasterReplyMsg>(NULL);
  }

  MasterReplyMsg* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MasterReplyMsg>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MasterReplyMsg& from);
  void MergeFrom(const MasterReplyMsg& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MasterReplyMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string msg = 2;
  void clear_msg();
  static const int kMsgFieldNumber = 2;
  const ::std::string& msg() const;
  void set_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_msg(::std::string&& value);
  #endif
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  ::std::string* mutable_msg();
  ::std::string* release_msg();
  void set_allocated_msg(::std::string* msg);

  // bool ok = 1;
  void clear_ok();
  static const int kOkFieldNumber = 1;
  bool ok() const;
  void set_ok(bool value);

  // @@protoc_insertion_point(class_scope:mapreduce.MasterReplyMsg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr msg_;
  bool ok_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_master_5fservice_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RegisterInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mapreduce.RegisterInfo) */ {
 public:
  RegisterInfo();
  virtual ~RegisterInfo();

  RegisterInfo(const RegisterInfo& from);

  inline RegisterInfo& operator=(const RegisterInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RegisterInfo(RegisterInfo&& from) noexcept
    : RegisterInfo() {
    *this = ::std::move(from);
  }

  inline RegisterInfo& operator=(RegisterInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RegisterInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegisterInfo* internal_default_instance() {
    return reinterpret_cast<const RegisterInfo*>(
               &_RegisterInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(RegisterInfo* other);
  friend void swap(RegisterInfo& a, RegisterInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RegisterInfo* New() const final {
    return CreateMaybeMessage<RegisterInfo>(NULL);
  }

  RegisterInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RegisterInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RegisterInfo& from);
  void MergeFrom(const RegisterInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string address = 1;
  void clear_address();
  static const int kAddressFieldNumber = 1;
  const ::std::string& address() const;
  void set_address(const ::std::string& value);
  #if LANG_CXX11
  void set_address(::std::string&& value);
  #endif
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  ::std::string* mutable_address();
  ::std::string* release_address();
  void set_allocated_address(::std::string* address);

  // @@protoc_insertion_point(class_scope:mapreduce.RegisterInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr address_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_master_5fservice_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Job_KV : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mapreduce.Job.KV) */ {
 public:
  Job_KV();
  virtual ~Job_KV();

  Job_KV(const Job_KV& from);

  inline Job_KV& operator=(const Job_KV& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Job_KV(Job_KV&& from) noexcept
    : Job_KV() {
    *this = ::std::move(from);
  }

  inline Job_KV& operator=(Job_KV&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Job_KV& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Job_KV* internal_default_instance() {
    return reinterpret_cast<const Job_KV*>(
               &_Job_KV_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Job_KV* other);
  friend void swap(Job_KV& a, Job_KV& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Job_KV* New() const final {
    return CreateMaybeMessage<Job_KV>(NULL);
  }

  Job_KV* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Job_KV>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Job_KV& from);
  void MergeFrom(const Job_KV& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Job_KV* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string key = 1;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // string value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:mapreduce.Job.KV)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_master_5fservice_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Job : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mapreduce.Job) */ {
 public:
  Job();
  virtual ~Job();

  Job(const Job& from);

  inline Job& operator=(const Job& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Job(Job&& from) noexcept
    : Job() {
    *this = ::std::move(from);
  }

  inline Job& operator=(Job&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Job& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Job* internal_default_instance() {
    return reinterpret_cast<const Job*>(
               &_Job_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(Job* other);
  friend void swap(Job& a, Job& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Job* New() const final {
    return CreateMaybeMessage<Job>(NULL);
  }

  Job* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Job>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Job& from);
  void MergeFrom(const Job& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Job* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Job_KV KV;

  // accessors -------------------------------------------------------

  // repeated .mapreduce.Job.KV kvs = 5;
  int kvs_size() const;
  void clear_kvs();
  static const int kKvsFieldNumber = 5;
  ::mapreduce::Job_KV* mutable_kvs(int index);
  ::google::protobuf::RepeatedPtrField< ::mapreduce::Job_KV >*
      mutable_kvs();
  const ::mapreduce::Job_KV& kvs(int index) const;
  ::mapreduce::Job_KV* add_kvs();
  const ::google::protobuf::RepeatedPtrField< ::mapreduce::Job_KV >&
      kvs() const;

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  #if LANG_CXX11
  void set_type(::std::string&& value);
  #endif
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // uint32 mapper_num = 3;
  void clear_mapper_num();
  static const int kMapperNumFieldNumber = 3;
  ::google::protobuf::uint32 mapper_num() const;
  void set_mapper_num(::google::protobuf::uint32 value);

  // uint32 reducer_num = 4;
  void clear_reducer_num();
  static const int kReducerNumFieldNumber = 4;
  ::google::protobuf::uint32 reducer_num() const;
  void set_reducer_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:mapreduce.Job)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::mapreduce::Job_KV > kvs_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::google::protobuf::uint32 mapper_num_;
  ::google::protobuf::uint32 reducer_num_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_master_5fservice_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RegisterReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mapreduce.RegisterReply) */ {
 public:
  RegisterReply();
  virtual ~RegisterReply();

  RegisterReply(const RegisterReply& from);

  inline RegisterReply& operator=(const RegisterReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RegisterReply(RegisterReply&& from) noexcept
    : RegisterReply() {
    *this = ::std::move(from);
  }

  inline RegisterReply& operator=(RegisterReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RegisterReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegisterReply* internal_default_instance() {
    return reinterpret_cast<const RegisterReply*>(
               &_RegisterReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(RegisterReply* other);
  friend void swap(RegisterReply& a, RegisterReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RegisterReply* New() const final {
    return CreateMaybeMessage<RegisterReply>(NULL);
  }

  RegisterReply* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RegisterReply>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RegisterReply& from);
  void MergeFrom(const RegisterReply& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .mapreduce.MasterReplyMsg reply = 1;
  bool has_reply() const;
  void clear_reply();
  static const int kReplyFieldNumber = 1;
  private:
  const ::mapreduce::MasterReplyMsg& _internal_reply() const;
  public:
  const ::mapreduce::MasterReplyMsg& reply() const;
  ::mapreduce::MasterReplyMsg* release_reply();
  ::mapreduce::MasterReplyMsg* mutable_reply();
  void set_allocated_reply(::mapreduce::MasterReplyMsg* reply);

  // uint32 worker_id = 2;
  void clear_worker_id();
  static const int kWorkerIdFieldNumber = 2;
  ::google::protobuf::uint32 worker_id() const;
  void set_worker_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:mapreduce.RegisterReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::mapreduce::MasterReplyMsg* reply_;
  ::google::protobuf::uint32 worker_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_master_5fservice_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LaunchReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mapreduce.LaunchReply) */ {
 public:
  LaunchReply();
  virtual ~LaunchReply();

  LaunchReply(const LaunchReply& from);

  inline LaunchReply& operator=(const LaunchReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LaunchReply(LaunchReply&& from) noexcept
    : LaunchReply() {
    *this = ::std::move(from);
  }

  inline LaunchReply& operator=(LaunchReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LaunchReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LaunchReply* internal_default_instance() {
    return reinterpret_cast<const LaunchReply*>(
               &_LaunchReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(LaunchReply* other);
  friend void swap(LaunchReply& a, LaunchReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LaunchReply* New() const final {
    return CreateMaybeMessage<LaunchReply>(NULL);
  }

  LaunchReply* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LaunchReply>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LaunchReply& from);
  void MergeFrom(const LaunchReply& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LaunchReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .mapreduce.MasterReplyMsg reply = 1;
  bool has_reply() const;
  void clear_reply();
  static const int kReplyFieldNumber = 1;
  private:
  const ::mapreduce::MasterReplyMsg& _internal_reply() const;
  public:
  const ::mapreduce::MasterReplyMsg& reply() const;
  ::mapreduce::MasterReplyMsg* release_reply();
  ::mapreduce::MasterReplyMsg* mutable_reply();
  void set_allocated_reply(::mapreduce::MasterReplyMsg* reply);

  // uint32 job_id = 2;
  void clear_job_id();
  static const int kJobIdFieldNumber = 2;
  ::google::protobuf::uint32 job_id() const;
  void set_job_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:mapreduce.LaunchReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::mapreduce::MasterReplyMsg* reply_;
  ::google::protobuf::uint32 job_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_master_5fservice_2eproto::TableStruct;
};
// ===================================================================

class MasterService_Stub;

class MasterService : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline MasterService() {};
 public:
  virtual ~MasterService();

  typedef MasterService_Stub Stub;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void Register(::google::protobuf::RpcController* controller,
                       const ::mapreduce::RegisterInfo* request,
                       ::mapreduce::RegisterReply* response,
                       ::google::protobuf::Closure* done);
  virtual void Launch(::google::protobuf::RpcController* controller,
                       const ::mapreduce::Job* request,
                       ::mapreduce::LaunchReply* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(MasterService);
};

class MasterService_Stub : public MasterService {
 public:
  MasterService_Stub(::google::protobuf::RpcChannel* channel);
  MasterService_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~MasterService_Stub();

  inline ::google::protobuf::RpcChannel* channel() { return channel_; }

  // implements MasterService ------------------------------------------

  void Register(::google::protobuf::RpcController* controller,
                       const ::mapreduce::RegisterInfo* request,
                       ::mapreduce::RegisterReply* response,
                       ::google::protobuf::Closure* done);
  void Launch(::google::protobuf::RpcController* controller,
                       const ::mapreduce::Job* request,
                       ::mapreduce::LaunchReply* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(MasterService_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MasterReplyMsg

// bool ok = 1;
inline void MasterReplyMsg::clear_ok() {
  ok_ = false;
}
inline bool MasterReplyMsg::ok() const {
  // @@protoc_insertion_point(field_get:mapreduce.MasterReplyMsg.ok)
  return ok_;
}
inline void MasterReplyMsg::set_ok(bool value) {
  
  ok_ = value;
  // @@protoc_insertion_point(field_set:mapreduce.MasterReplyMsg.ok)
}

// string msg = 2;
inline void MasterReplyMsg::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MasterReplyMsg::msg() const {
  // @@protoc_insertion_point(field_get:mapreduce.MasterReplyMsg.msg)
  return msg_.GetNoArena();
}
inline void MasterReplyMsg::set_msg(const ::std::string& value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mapreduce.MasterReplyMsg.msg)
}
#if LANG_CXX11
inline void MasterReplyMsg::set_msg(::std::string&& value) {
  
  msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mapreduce.MasterReplyMsg.msg)
}
#endif
inline void MasterReplyMsg::set_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mapreduce.MasterReplyMsg.msg)
}
inline void MasterReplyMsg::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mapreduce.MasterReplyMsg.msg)
}
inline ::std::string* MasterReplyMsg::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:mapreduce.MasterReplyMsg.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MasterReplyMsg::release_msg() {
  // @@protoc_insertion_point(field_release:mapreduce.MasterReplyMsg.msg)
  
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MasterReplyMsg::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:mapreduce.MasterReplyMsg.msg)
}

// -------------------------------------------------------------------

// RegisterInfo

// string address = 1;
inline void RegisterInfo::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RegisterInfo::address() const {
  // @@protoc_insertion_point(field_get:mapreduce.RegisterInfo.address)
  return address_.GetNoArena();
}
inline void RegisterInfo::set_address(const ::std::string& value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mapreduce.RegisterInfo.address)
}
#if LANG_CXX11
inline void RegisterInfo::set_address(::std::string&& value) {
  
  address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mapreduce.RegisterInfo.address)
}
#endif
inline void RegisterInfo::set_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mapreduce.RegisterInfo.address)
}
inline void RegisterInfo::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mapreduce.RegisterInfo.address)
}
inline ::std::string* RegisterInfo::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:mapreduce.RegisterInfo.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RegisterInfo::release_address() {
  // @@protoc_insertion_point(field_release:mapreduce.RegisterInfo.address)
  
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RegisterInfo::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:mapreduce.RegisterInfo.address)
}

// -------------------------------------------------------------------

// Job_KV

// string key = 1;
inline void Job_KV::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Job_KV::key() const {
  // @@protoc_insertion_point(field_get:mapreduce.Job.KV.key)
  return key_.GetNoArena();
}
inline void Job_KV::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mapreduce.Job.KV.key)
}
#if LANG_CXX11
inline void Job_KV::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mapreduce.Job.KV.key)
}
#endif
inline void Job_KV::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mapreduce.Job.KV.key)
}
inline void Job_KV::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mapreduce.Job.KV.key)
}
inline ::std::string* Job_KV::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:mapreduce.Job.KV.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Job_KV::release_key() {
  // @@protoc_insertion_point(field_release:mapreduce.Job.KV.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Job_KV::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:mapreduce.Job.KV.key)
}

// string value = 2;
inline void Job_KV::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Job_KV::value() const {
  // @@protoc_insertion_point(field_get:mapreduce.Job.KV.value)
  return value_.GetNoArena();
}
inline void Job_KV::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mapreduce.Job.KV.value)
}
#if LANG_CXX11
inline void Job_KV::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mapreduce.Job.KV.value)
}
#endif
inline void Job_KV::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mapreduce.Job.KV.value)
}
inline void Job_KV::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mapreduce.Job.KV.value)
}
inline ::std::string* Job_KV::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:mapreduce.Job.KV.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Job_KV::release_value() {
  // @@protoc_insertion_point(field_release:mapreduce.Job.KV.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Job_KV::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:mapreduce.Job.KV.value)
}

// -------------------------------------------------------------------

// Job

// string name = 1;
inline void Job::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Job::name() const {
  // @@protoc_insertion_point(field_get:mapreduce.Job.name)
  return name_.GetNoArena();
}
inline void Job::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mapreduce.Job.name)
}
#if LANG_CXX11
inline void Job::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mapreduce.Job.name)
}
#endif
inline void Job::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mapreduce.Job.name)
}
inline void Job::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mapreduce.Job.name)
}
inline ::std::string* Job::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:mapreduce.Job.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Job::release_name() {
  // @@protoc_insertion_point(field_release:mapreduce.Job.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Job::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:mapreduce.Job.name)
}

// string type = 2;
inline void Job::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Job::type() const {
  // @@protoc_insertion_point(field_get:mapreduce.Job.type)
  return type_.GetNoArena();
}
inline void Job::set_type(const ::std::string& value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mapreduce.Job.type)
}
#if LANG_CXX11
inline void Job::set_type(::std::string&& value) {
  
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mapreduce.Job.type)
}
#endif
inline void Job::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mapreduce.Job.type)
}
inline void Job::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mapreduce.Job.type)
}
inline ::std::string* Job::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:mapreduce.Job.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Job::release_type() {
  // @@protoc_insertion_point(field_release:mapreduce.Job.type)
  
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Job::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:mapreduce.Job.type)
}

// uint32 mapper_num = 3;
inline void Job::clear_mapper_num() {
  mapper_num_ = 0u;
}
inline ::google::protobuf::uint32 Job::mapper_num() const {
  // @@protoc_insertion_point(field_get:mapreduce.Job.mapper_num)
  return mapper_num_;
}
inline void Job::set_mapper_num(::google::protobuf::uint32 value) {
  
  mapper_num_ = value;
  // @@protoc_insertion_point(field_set:mapreduce.Job.mapper_num)
}

// uint32 reducer_num = 4;
inline void Job::clear_reducer_num() {
  reducer_num_ = 0u;
}
inline ::google::protobuf::uint32 Job::reducer_num() const {
  // @@protoc_insertion_point(field_get:mapreduce.Job.reducer_num)
  return reducer_num_;
}
inline void Job::set_reducer_num(::google::protobuf::uint32 value) {
  
  reducer_num_ = value;
  // @@protoc_insertion_point(field_set:mapreduce.Job.reducer_num)
}

// repeated .mapreduce.Job.KV kvs = 5;
inline int Job::kvs_size() const {
  return kvs_.size();
}
inline void Job::clear_kvs() {
  kvs_.Clear();
}
inline ::mapreduce::Job_KV* Job::mutable_kvs(int index) {
  // @@protoc_insertion_point(field_mutable:mapreduce.Job.kvs)
  return kvs_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::mapreduce::Job_KV >*
Job::mutable_kvs() {
  // @@protoc_insertion_point(field_mutable_list:mapreduce.Job.kvs)
  return &kvs_;
}
inline const ::mapreduce::Job_KV& Job::kvs(int index) const {
  // @@protoc_insertion_point(field_get:mapreduce.Job.kvs)
  return kvs_.Get(index);
}
inline ::mapreduce::Job_KV* Job::add_kvs() {
  // @@protoc_insertion_point(field_add:mapreduce.Job.kvs)
  return kvs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::mapreduce::Job_KV >&
Job::kvs() const {
  // @@protoc_insertion_point(field_list:mapreduce.Job.kvs)
  return kvs_;
}

// -------------------------------------------------------------------

// RegisterReply

// .mapreduce.MasterReplyMsg reply = 1;
inline bool RegisterReply::has_reply() const {
  return this != internal_default_instance() && reply_ != NULL;
}
inline void RegisterReply::clear_reply() {
  if (GetArenaNoVirtual() == NULL && reply_ != NULL) {
    delete reply_;
  }
  reply_ = NULL;
}
inline const ::mapreduce::MasterReplyMsg& RegisterReply::_internal_reply() const {
  return *reply_;
}
inline const ::mapreduce::MasterReplyMsg& RegisterReply::reply() const {
  const ::mapreduce::MasterReplyMsg* p = reply_;
  // @@protoc_insertion_point(field_get:mapreduce.RegisterReply.reply)
  return p != NULL ? *p : *reinterpret_cast<const ::mapreduce::MasterReplyMsg*>(
      &::mapreduce::_MasterReplyMsg_default_instance_);
}
inline ::mapreduce::MasterReplyMsg* RegisterReply::release_reply() {
  // @@protoc_insertion_point(field_release:mapreduce.RegisterReply.reply)
  
  ::mapreduce::MasterReplyMsg* temp = reply_;
  reply_ = NULL;
  return temp;
}
inline ::mapreduce::MasterReplyMsg* RegisterReply::mutable_reply() {
  
  if (reply_ == NULL) {
    auto* p = CreateMaybeMessage<::mapreduce::MasterReplyMsg>(GetArenaNoVirtual());
    reply_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mapreduce.RegisterReply.reply)
  return reply_;
}
inline void RegisterReply::set_allocated_reply(::mapreduce::MasterReplyMsg* reply) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reply_;
  }
  if (reply) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      reply = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, reply, submessage_arena);
    }
    
  } else {
    
  }
  reply_ = reply;
  // @@protoc_insertion_point(field_set_allocated:mapreduce.RegisterReply.reply)
}

// uint32 worker_id = 2;
inline void RegisterReply::clear_worker_id() {
  worker_id_ = 0u;
}
inline ::google::protobuf::uint32 RegisterReply::worker_id() const {
  // @@protoc_insertion_point(field_get:mapreduce.RegisterReply.worker_id)
  return worker_id_;
}
inline void RegisterReply::set_worker_id(::google::protobuf::uint32 value) {
  
  worker_id_ = value;
  // @@protoc_insertion_point(field_set:mapreduce.RegisterReply.worker_id)
}

// -------------------------------------------------------------------

// LaunchReply

// .mapreduce.MasterReplyMsg reply = 1;
inline bool LaunchReply::has_reply() const {
  return this != internal_default_instance() && reply_ != NULL;
}
inline void LaunchReply::clear_reply() {
  if (GetArenaNoVirtual() == NULL && reply_ != NULL) {
    delete reply_;
  }
  reply_ = NULL;
}
inline const ::mapreduce::MasterReplyMsg& LaunchReply::_internal_reply() const {
  return *reply_;
}
inline const ::mapreduce::MasterReplyMsg& LaunchReply::reply() const {
  const ::mapreduce::MasterReplyMsg* p = reply_;
  // @@protoc_insertion_point(field_get:mapreduce.LaunchReply.reply)
  return p != NULL ? *p : *reinterpret_cast<const ::mapreduce::MasterReplyMsg*>(
      &::mapreduce::_MasterReplyMsg_default_instance_);
}
inline ::mapreduce::MasterReplyMsg* LaunchReply::release_reply() {
  // @@protoc_insertion_point(field_release:mapreduce.LaunchReply.reply)
  
  ::mapreduce::MasterReplyMsg* temp = reply_;
  reply_ = NULL;
  return temp;
}
inline ::mapreduce::MasterReplyMsg* LaunchReply::mutable_reply() {
  
  if (reply_ == NULL) {
    auto* p = CreateMaybeMessage<::mapreduce::MasterReplyMsg>(GetArenaNoVirtual());
    reply_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mapreduce.LaunchReply.reply)
  return reply_;
}
inline void LaunchReply::set_allocated_reply(::mapreduce::MasterReplyMsg* reply) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reply_;
  }
  if (reply) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      reply = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, reply, submessage_arena);
    }
    
  } else {
    
  }
  reply_ = reply;
  // @@protoc_insertion_point(field_set_allocated:mapreduce.LaunchReply.reply)
}

// uint32 job_id = 2;
inline void LaunchReply::clear_job_id() {
  job_id_ = 0u;
}
inline ::google::protobuf::uint32 LaunchReply::job_id() const {
  // @@protoc_insertion_point(field_get:mapreduce.LaunchReply.job_id)
  return job_id_;
}
inline void LaunchReply::set_job_id(::google::protobuf::uint32 value) {
  
  job_id_ = value;
  // @@protoc_insertion_point(field_set:mapreduce.LaunchReply.job_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace mapreduce

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_master_5fservice_2eproto
