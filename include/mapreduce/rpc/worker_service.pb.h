// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: worker_service.proto

#ifndef PROTOBUF_worker_5fservice_2eproto__INCLUDED
#define PROTOBUF_worker_5fservice_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)

namespace protobuf_worker_5fservice_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsReplyMsgImpl();
void InitDefaultsReplyMsg();
void InitDefaultsBeatMsgImpl();
void InitDefaultsBeatMsg();
inline void InitDefaults() {
  InitDefaultsReplyMsg();
  InitDefaultsBeatMsg();
}
}  // namespace protobuf_worker_5fservice_2eproto
namespace mapreduce {
class BeatMsg;
class BeatMsgDefaultTypeInternal;
extern BeatMsgDefaultTypeInternal _BeatMsg_default_instance_;
class ReplyMsg;
class ReplyMsgDefaultTypeInternal;
extern ReplyMsgDefaultTypeInternal _ReplyMsg_default_instance_;
}  // namespace mapreduce
namespace mapreduce {

enum BeatMsg_WorkerState {
  BeatMsg_WorkerState_UNKNOWN = 0,
  BeatMsg_WorkerState_INIT = 1,
  BeatMsg_WorkerState_IDLE = 2,
  BeatMsg_WorkerState_WORKING = 3,
  BeatMsg_WorkerState_CLOSE = 4,
  BeatMsg_WorkerState_BeatMsg_WorkerState_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  BeatMsg_WorkerState_BeatMsg_WorkerState_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool BeatMsg_WorkerState_IsValid(int value);
const BeatMsg_WorkerState BeatMsg_WorkerState_WorkerState_MIN = BeatMsg_WorkerState_UNKNOWN;
const BeatMsg_WorkerState BeatMsg_WorkerState_WorkerState_MAX = BeatMsg_WorkerState_CLOSE;
const int BeatMsg_WorkerState_WorkerState_ARRAYSIZE = BeatMsg_WorkerState_WorkerState_MAX + 1;

const ::google::protobuf::EnumDescriptor* BeatMsg_WorkerState_descriptor();
inline const ::std::string& BeatMsg_WorkerState_Name(BeatMsg_WorkerState value) {
  return ::google::protobuf::internal::NameOfEnum(
    BeatMsg_WorkerState_descriptor(), value);
}
inline bool BeatMsg_WorkerState_Parse(
    const ::std::string& name, BeatMsg_WorkerState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BeatMsg_WorkerState>(
    BeatMsg_WorkerState_descriptor(), name, value);
}
// ===================================================================

class ReplyMsg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mapreduce.ReplyMsg) */ {
 public:
  ReplyMsg();
  virtual ~ReplyMsg();

  ReplyMsg(const ReplyMsg& from);

  inline ReplyMsg& operator=(const ReplyMsg& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReplyMsg(ReplyMsg&& from) noexcept
    : ReplyMsg() {
    *this = ::std::move(from);
  }

  inline ReplyMsg& operator=(ReplyMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReplyMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReplyMsg* internal_default_instance() {
    return reinterpret_cast<const ReplyMsg*>(
               &_ReplyMsg_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(ReplyMsg* other);
  friend void swap(ReplyMsg& a, ReplyMsg& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReplyMsg* New() const PROTOBUF_FINAL { return New(NULL); }

  ReplyMsg* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ReplyMsg& from);
  void MergeFrom(const ReplyMsg& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ReplyMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string msg = 2;
  void clear_msg();
  static const int kMsgFieldNumber = 2;
  const ::std::string& msg() const;
  void set_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_msg(::std::string&& value);
  #endif
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  ::std::string* mutable_msg();
  ::std::string* release_msg();
  void set_allocated_msg(::std::string* msg);

  // bool ok = 1;
  void clear_ok();
  static const int kOkFieldNumber = 1;
  bool ok() const;
  void set_ok(bool value);

  // @@protoc_insertion_point(class_scope:mapreduce.ReplyMsg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr msg_;
  bool ok_;
  mutable int _cached_size_;
  friend struct ::protobuf_worker_5fservice_2eproto::TableStruct;
  friend void ::protobuf_worker_5fservice_2eproto::InitDefaultsReplyMsgImpl();
};
// -------------------------------------------------------------------

class BeatMsg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mapreduce.BeatMsg) */ {
 public:
  BeatMsg();
  virtual ~BeatMsg();

  BeatMsg(const BeatMsg& from);

  inline BeatMsg& operator=(const BeatMsg& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BeatMsg(BeatMsg&& from) noexcept
    : BeatMsg() {
    *this = ::std::move(from);
  }

  inline BeatMsg& operator=(BeatMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BeatMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BeatMsg* internal_default_instance() {
    return reinterpret_cast<const BeatMsg*>(
               &_BeatMsg_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(BeatMsg* other);
  friend void swap(BeatMsg& a, BeatMsg& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BeatMsg* New() const PROTOBUF_FINAL { return New(NULL); }

  BeatMsg* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BeatMsg& from);
  void MergeFrom(const BeatMsg& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BeatMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef BeatMsg_WorkerState WorkerState;
  static const WorkerState UNKNOWN =
    BeatMsg_WorkerState_UNKNOWN;
  static const WorkerState INIT =
    BeatMsg_WorkerState_INIT;
  static const WorkerState IDLE =
    BeatMsg_WorkerState_IDLE;
  static const WorkerState WORKING =
    BeatMsg_WorkerState_WORKING;
  static const WorkerState CLOSE =
    BeatMsg_WorkerState_CLOSE;
  static inline bool WorkerState_IsValid(int value) {
    return BeatMsg_WorkerState_IsValid(value);
  }
  static const WorkerState WorkerState_MIN =
    BeatMsg_WorkerState_WorkerState_MIN;
  static const WorkerState WorkerState_MAX =
    BeatMsg_WorkerState_WorkerState_MAX;
  static const int WorkerState_ARRAYSIZE =
    BeatMsg_WorkerState_WorkerState_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  WorkerState_descriptor() {
    return BeatMsg_WorkerState_descriptor();
  }
  static inline const ::std::string& WorkerState_Name(WorkerState value) {
    return BeatMsg_WorkerState_Name(value);
  }
  static inline bool WorkerState_Parse(const ::std::string& name,
      WorkerState* value) {
    return BeatMsg_WorkerState_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .mapreduce.ReplyMsg reply = 2;
  bool has_reply() const;
  void clear_reply();
  static const int kReplyFieldNumber = 2;
  const ::mapreduce::ReplyMsg& reply() const;
  ::mapreduce::ReplyMsg* release_reply();
  ::mapreduce::ReplyMsg* mutable_reply();
  void set_allocated_reply(::mapreduce::ReplyMsg* reply);

  // .mapreduce.BeatMsg.WorkerState state = 1;
  void clear_state();
  static const int kStateFieldNumber = 1;
  ::mapreduce::BeatMsg_WorkerState state() const;
  void set_state(::mapreduce::BeatMsg_WorkerState value);

  // @@protoc_insertion_point(class_scope:mapreduce.BeatMsg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::mapreduce::ReplyMsg* reply_;
  int state_;
  mutable int _cached_size_;
  friend struct ::protobuf_worker_5fservice_2eproto::TableStruct;
  friend void ::protobuf_worker_5fservice_2eproto::InitDefaultsBeatMsgImpl();
};
// ===================================================================

class WorkerService_Stub;

class WorkerService : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline WorkerService() {};
 public:
  virtual ~WorkerService();

  typedef WorkerService_Stub Stub;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void Beat(::google::protobuf::RpcController* controller,
                       const ::google::protobuf::Empty* request,
                       ::mapreduce::BeatMsg* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(WorkerService);
};

class WorkerService_Stub : public WorkerService {
 public:
  WorkerService_Stub(::google::protobuf::RpcChannel* channel);
  WorkerService_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~WorkerService_Stub();

  inline ::google::protobuf::RpcChannel* channel() { return channel_; }

  // implements WorkerService ------------------------------------------

  void Beat(::google::protobuf::RpcController* controller,
                       const ::google::protobuf::Empty* request,
                       ::mapreduce::BeatMsg* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(WorkerService_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ReplyMsg

// bool ok = 1;
inline void ReplyMsg::clear_ok() {
  ok_ = false;
}
inline bool ReplyMsg::ok() const {
  // @@protoc_insertion_point(field_get:mapreduce.ReplyMsg.ok)
  return ok_;
}
inline void ReplyMsg::set_ok(bool value) {
  
  ok_ = value;
  // @@protoc_insertion_point(field_set:mapreduce.ReplyMsg.ok)
}

// string msg = 2;
inline void ReplyMsg::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReplyMsg::msg() const {
  // @@protoc_insertion_point(field_get:mapreduce.ReplyMsg.msg)
  return msg_.GetNoArena();
}
inline void ReplyMsg::set_msg(const ::std::string& value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mapreduce.ReplyMsg.msg)
}
#if LANG_CXX11
inline void ReplyMsg::set_msg(::std::string&& value) {
  
  msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mapreduce.ReplyMsg.msg)
}
#endif
inline void ReplyMsg::set_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mapreduce.ReplyMsg.msg)
}
inline void ReplyMsg::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mapreduce.ReplyMsg.msg)
}
inline ::std::string* ReplyMsg::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:mapreduce.ReplyMsg.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReplyMsg::release_msg() {
  // @@protoc_insertion_point(field_release:mapreduce.ReplyMsg.msg)
  
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReplyMsg::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:mapreduce.ReplyMsg.msg)
}

// -------------------------------------------------------------------

// BeatMsg

// .mapreduce.BeatMsg.WorkerState state = 1;
inline void BeatMsg::clear_state() {
  state_ = 0;
}
inline ::mapreduce::BeatMsg_WorkerState BeatMsg::state() const {
  // @@protoc_insertion_point(field_get:mapreduce.BeatMsg.state)
  return static_cast< ::mapreduce::BeatMsg_WorkerState >(state_);
}
inline void BeatMsg::set_state(::mapreduce::BeatMsg_WorkerState value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:mapreduce.BeatMsg.state)
}

// .mapreduce.ReplyMsg reply = 2;
inline bool BeatMsg::has_reply() const {
  return this != internal_default_instance() && reply_ != NULL;
}
inline void BeatMsg::clear_reply() {
  if (GetArenaNoVirtual() == NULL && reply_ != NULL) {
    delete reply_;
  }
  reply_ = NULL;
}
inline const ::mapreduce::ReplyMsg& BeatMsg::reply() const {
  const ::mapreduce::ReplyMsg* p = reply_;
  // @@protoc_insertion_point(field_get:mapreduce.BeatMsg.reply)
  return p != NULL ? *p : *reinterpret_cast<const ::mapreduce::ReplyMsg*>(
      &::mapreduce::_ReplyMsg_default_instance_);
}
inline ::mapreduce::ReplyMsg* BeatMsg::release_reply() {
  // @@protoc_insertion_point(field_release:mapreduce.BeatMsg.reply)
  
  ::mapreduce::ReplyMsg* temp = reply_;
  reply_ = NULL;
  return temp;
}
inline ::mapreduce::ReplyMsg* BeatMsg::mutable_reply() {
  
  if (reply_ == NULL) {
    reply_ = new ::mapreduce::ReplyMsg;
  }
  // @@protoc_insertion_point(field_mutable:mapreduce.BeatMsg.reply)
  return reply_;
}
inline void BeatMsg::set_allocated_reply(::mapreduce::ReplyMsg* reply) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reply_;
  }
  if (reply) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      reply = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, reply, submessage_arena);
    }
    
  } else {
    
  }
  reply_ = reply;
  // @@protoc_insertion_point(field_set_allocated:mapreduce.BeatMsg.reply)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace mapreduce

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::mapreduce::BeatMsg_WorkerState> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mapreduce::BeatMsg_WorkerState>() {
  return ::mapreduce::BeatMsg_WorkerState_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_worker_5fservice_2eproto__INCLUDED
